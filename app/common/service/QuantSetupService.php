<?php
// +----------------------------------------------------------------------
// | RXThinkCMF框架 [ RXThinkCMF ]
// +----------------------------------------------------------------------
// | 版权所有 2017~2020 南京RXThinkCMF研发中心
// +----------------------------------------------------------------------
// | 官方网站: http://www.rxthink.cn
// +----------------------------------------------------------------------
// | Author: 牧羊人 <1175401194@qq.com>
// +----------------------------------------------------------------------

namespace app\common\service;


use app\common\model\Member;
use app\common\model\PlatformMember;
use app\common\model\QuantMarketBuy;
use app\common\model\QuantMarketItem;
use app\common\model\QuantMarketSell;
use app\common\model\QuantSetup;
use app\common\model\QuantSetupDown;
use app\common\model\QuantSetupUp;
use app\common\model\QuantStrategy;
use app\common\model\QuantSymbol;
use app\extend\Trade;

/**
 * 量化设置管理-服务类
 * @author 测试
 * @since: 2022/01/23
 * Class QuantSetupService
 * @package app\adminapi\service
 */
class QuantSetupService extends BaseService
{
    /**
     * 构造函数
     * LevelService constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->model = new QuantSetup();
    }

    /**
     * 获取数据列表
     * @return array
     * @since 2022/01/23
     * @author 测试
     */
    public function getList()
    {
        $param = $this->input;

        // 查询条件
        $map = [];
        if(isset($param['start_time']) && isset($param['end_time'])){
            $start = strtotime($param['start_time']);
            $end = strtotime($param['end_time']);
            $map[] = ['create_time', 'BETWEEN', [$start,$end]];
        }
        // 是否运行
        $is_run = isset($param['is_run']) ? (int)$param['is_run'] : 0;
        if ($is_run) {
            $map[] = ['is_run', '=', $is_run];
        }

        // 是否循环
        $is_loop = isset($param['is_loop']) ? (int)$param['is_loop'] : 0;
        if ($is_loop) {
            $map[] = ['is_loop', '=', $is_loop];
        }
        if (isset($param['user_name'])) {
//            $ids = Member::where('username','like','%user_name%') ->column('id');
            $ids = Member::where('username', 'like', "%{$param['user_name']}%")->column('id');
//            var_dump($ids);die;
            $map[] = ['user_id', 'IN', $ids];
        }
        return parent::getList($map); // TODO: Change the autogenerated stub
    }

    //

    /**
     * 获取该用户的持仓
     */
    public function bonds($userId)
    {
        $param = $this->input;
        // 查询条件
        $map = [];
        // 是否运行
        $platform_type = isset($param['platform_type']) ? (int)$param['platform_type'] : 0;
        if ($platform_type) {
            $map[] = ['platform_type', '=', $platform_type];
        }
        // 是否运行
        $platform_id = isset($param['platform_id']) ? (int)$param['platform_id'] : 0;
        if ($platform_id) {
            $map[] = ['platform_id', '=', $platform_id];
        }
        $map[] = ['user_id', '=', $userId];
        return parent::getList($map, 'is_run'); // TODO: Change the autogenerated stub

    }

    /**
     * @return \think\response\Json
     * 推荐策略
     */
    public function demo()
    {
        return return_json($data = [
            "platform_id" => "3", // 2欧易 3 币安
            "platform_type" => "1", //1现货  2合约
            "symbol" => "TRX/USDT", //代币种类
            'round' => 5,//做单数量
            'up_stop_per' => 1,//全仓止盈比例 %
            'down_back_per' => 1,//止损回调百分比  补仓回调
            "qb_first" => 60, //首单金额
            "is_double" => 0,//首单是否加倍
            'is_loop' => 1,//循环设置 0单次策略 1循环策略
            'up_back_per' => 1,//止盈回调百分比
            'down_stop_per' => 1,//止损百分比 补仓跌幅
            //分仓止盈比例 存在分仓止盈比例时  全仓止盈比例无效 %  未设置传空
            'up_stop_part' => [
                ["round" => 1,//循环次数
                    "up_stop_per" => "1",//止盈百分比
                ],
                ["round" => 2,//循环次数
                    "up_stop_per" => "1",//止盈百分比
                ],
                ["round" => 3,//循环次数
                    "up_stop_per" => "1",//止盈百分比
                ],
                ["round" => 4,//循环次数
                    "up_stop_per" => "1",//止盈百分比
                ],
                ["round" => 5,//循环次数
                    "up_stop_per" => "1",//止盈百分比
                ],
            ],
            'down_stop_part' => [
                ["round" => 1,//循环次数
                    "down_stop_per" => "1",//补仓百分比
                    'exp' => 1
                ],
                ["round" => 2,//循环次数
                    "down_stop_per" => "1",//补仓百分比
                    'exp' => 2
                ],
                [
                    "round" => 3,//循环次数
                    "down_stop_per" => "1",//补仓百分比
                    'exp' => 4
                ],
                ["round" => 4,//循环次数
                    "down_stop_per" => "1",//补仓百分比
                    'exp' => 8
                ],
                ["round" => 5,//循环次数
                    "down_stop_per" => "1",//补仓百分比
                    'exp' => 16
                ],
            ],//止损百分比 补仓设置
        ]);
    }

    /**
     * 获取我的策略
     */
    public function setup_load($userId)
    {
        $validate = getValidate([

            'id' => 'require',
        ], [
            'id.require' => '请选择策略',
        ]);
        if ($validate['code'] == 1) {
            return $validate;
        }
        $data_setup = QuantSetup::where(["id" => $this->input["id"]])->find();

        if ($data_setup) {
            $data_setup = $data_setup->toArray();
            //止损百分比
            $data_setup['down_stop_per'] = floatval(getBcRound($data_setup['down_stop_per'], 1));
            //止损回调百分比
            $data_setup['down_back_per'] = floatval(getBcRound($data_setup['down_back_per'], 1));
            //止盈百分比
            $data_setup['up_stop_per'] = floatval(getBcRound($data_setup['up_stop_per'], 1));
            //止盈回落百分比
            $data_setup['up_back_per'] = floatval(getBcRound($data_setup['up_back_per'], 1));
            $data_setup['up_stop_part'] = QuantSetupUp::where(["user_id" => $userId, 'setup_id' => $data_setup['id']])->field('rounds,up_stop_per')->select();
            $data_setup['down_stop_part'] = QuantSetupDown::where(["user_id" => $userId, 'setup_id' => $data_setup['id']])->field('rounds,down_stop_per,exp')->select();
            $data_setup['symbol'] = $data_setup["symbol"];
            if ($data_setup['platform_type'] == 2){
                $data_setup['qb_first'] = $data_setup["bail"];
            }
        }

        return $data_setup;
    }

    public function setup_save($userId)
    {
//        var_dump($this->input);die;
        $validate = getValidate([
            'platform_id' => 'require',
            'platform_type' => 'require',
            'symbol' => 'require',
            'is_loop' => 'require',
            'qb_first' => 'require',
            'is_double' => 'require',
            'round' => 'require',
            'up_stop_per' => 'require',
            'down_stop_per' => 'require',
            'up_back_per' => 'require',
            'down_back_per' => 'require',
        ], [
            'platform_id.require' => '请选择平台',
            'platform_type.require' => '请选择类别',
            'symbol.require' => '请选择交易品种',
            'is_loop.require' => '请选择循环策略类型',
            'qb_first.require' => '请输入首单金额',
            'down_stop_per.require' => '请输入补仓跌幅百分比',
            'up_stop_per.require' => '请输入止盈百分比',
            'is_double.require' => '请输入首单是否加倍',
            'up_back_per.require' => '请输入止盈回调百分比',
            'down_back_per.require' => '请输入补仓回调百分比',
            'round.require' => '请输入做单数量'
        ]);
        if ($validate['code'] == 1) {
            return $validate;
        }

        $data_member = Member::where(["id" => $userId])->find();
        if ($data_member["rank"] == 0) {
            return [
                "code" => 1,
                "msg" => "账号尚未激活"
            ];
        }
        if ($data_member["qb_usdt_point"] < get_config('min_usdt', 1)) {
            return [
                "code" => 2,
                "msg" => "当前点卡额度必须大于" . get_config('min_usdt', 1) . '才可开启机器人'
            ];
        }
        if (!Member::check_usdt($userId, 2)) {
            return [
                "code" => 1,
                "msg" => "账号余额不足"
            ];
        }
        $data_member = PlatformMember::where(["user_id" => $userId, 'platform_id' => $this->input['platform_id']])->find();
        if (!$data_member) {
            return [
                "code" => 1,
                "msg" => "请先设置API"
            ];
        }

        //止损比例 只有合约有
        $up_back_scale = "";
        $lever = "";
        $open_type = 0;
        $bail = 0;
        //合约账户
        if ($this->input["platform_type"] == 2) {
            //一会单独处理 TODU
            $validate = getValidate([
                'lever' => 'require|min:1|max:124',
                'open_type' => 'require',
            ], [
                'lever.require' => '合约倍数不能为空',
                'open_type.require' => '开仓方向不能为空',
            ]);
            if ($validate['code'] == 1) {
                return $validate;
            }
            $up_back_scale = 0.5;
            $lever = $this->input["lever"];
            $open_type = $this->input["open_type"];
            $bail = $this->input['qb_first'];
            $member_service = new MemberService();
            $exchange = $member_service->sign($userId, $this->input["platform_id"]);
            if (!$exchange) {
                return [
                    "code" => 1,
                    "msg" => "请先设置API"
                ];
            }

//            $trade = new Trade();
//            $trade->set_leverage(["user_id" => $userId, "lever" => $this->input["lever"], "symbol" => $this->input["symbol"], "platform_id" => $this->input["platform_id"]]);

        }
        //判断是否设置分仓比例
        if (is_array($this->input["up_stop_part"])) {
            if (count($this->input["up_stop_part"]) != $this->input["round"]) {
                return [
                    "code" => 1,
                    "msg" => "请补全或清空分仓止盈比例"
                ];
            }
            //如果设置循环止盈比例  则策略止盈比例为第一条数据
            $up_stop_part = $this->input["up_stop_part"][0]['up_stop_per'];
        } else {
            $up_stop_part = $this->input['up_stop_per'];
        }
        //补仓
        if (is_array($this->input["down_stop_part"])) {

            if (count($this->input["down_stop_part"]) != $this->input["round"]) {

                return [
                    "code" => 1,
                    "msg" => "请补全或清空补仓设置"
                ];
            }
            $down_stop_part = $this->input["down_stop_part"][0]['down_stop_per'];
        } else {

            $down_stop_part = $this->input['down_stop_per'];
        }
        //查询策略
        $data_setup = QuantSetup::where(["symbol" => $this->input["symbol"], "user_id" => $userId, "platform_id" => $this->input["platform_id"], "platform_type" => $this->input["platform_type"]])->where('is_run',"<>",3)->find();
        if (!$data_setup) {
            $data = [
                'platform_id' => $this->input["platform_id"],
                'platform_type' => $this->input["platform_type"],
                'symbol' => $this->input["symbol"],
                'qb_first' => $this->input["qb_first"],
                'is_double' => $this->input["is_double"],
                "user_id" => $userId,
                'rounds' => $this->input['round'],
                'down_stop_per' => $up_stop_part,
                'down_back_per' => $this->input['down_back_per'],//止损回调百分比  补仓回调
                'up_stop_per' => $down_stop_part,
                'up_back_per' => $this->input['up_back_per'],//止盈回调百分比
                'is_run' => 1,
                'is_loop' => $this->input["is_loop"],
                'open_type' => $open_type,
                'lever' => $lever,
                'up_back_scale' => $up_back_scale,
                'bail' => $bail
            ];
            if ($this->input["platform_type"] == 2){
                $data['qb_first']=$this->input["qb_first"]*$this->input["lever"];
            }

            $data = QuantSetup::create($data);
            if (is_array($this->input["up_stop_part"])) {
                //如果设置循环止盈比例  则策略止盈比例为第一条数据
                foreach ($this->input["up_stop_part"] as $item) {
                    QuantSetupUp::create([
                        "user_id" => $userId,
                        "platform_id" => $this->input["platform_id"],
                        "platform_type" => $this->input["platform_type"],
                        "symbol" => $this->input["symbol"],
                        "rounds" => $item["round"],
                        "up_stop_per" => $item["up_stop_per"],
                        "setup_id" => $data["id"]
                    ]);
                }
            } else {
                for ($round = 1; $round <= $this->input['round']; $round++) {
                    QuantSetupUp::create([
                        "user_id" => $userId,
                        "platform_id" => $this->input["platform_id"],
                        "platform_type" => $this->input["platform_type"],
                        "symbol" => $this->input["symbol"],
                        "rounds" => $round,
                        "up_stop_per" => $this->input["up_stop_per"],
                        "setup_id" => $data["id"]
                    ]);
                }

            }
            //补仓
            if (is_array($this->input["down_stop_part"])) {
                foreach ($this->input["down_stop_part"] as $item) {
                    QuantSetupDown::create([
                        "user_id" => $userId,
                        "platform_id" => $this->input["platform_id"],
                        "platform_type" => $this->input["platform_type"],
                        "symbol" => $this->input["symbol"],
                        "rounds" => $item["round"],
                        "up_stop_per" => $item["down_stop_per"],
                        "setup_id" => $data["id"],
                        "exp" => $item["exp"]
                    ]);
                }
            } else {
                for ($round = 1; $round <= $this->input['round']; $round++) {
                    QuantSetupDown::create([
                        "user_id" => $userId,
                        "platform_id" => $this->input["platform_id"],
                        "platform_type" => $this->input["platform_type"],
                        "symbol" => $this->input["symbol"],
                        "rounds" => $round,
                        "up_stop_per" => $this->input["down_stop_per"],
                        "setup_id" => $data["id"],
                        "exp" => pow(2, $round - 1)
                    ]);
                }

            }

        }
        else {
            //判断是否已经开启并且已经买入
            if ($this->input["platform_type"] == 2) {
                //判断是否已经买进
                $buy_info = QuantMarketBuy::where(["symbol" => $this->input["symbol"], "is_sale" => 0, "is_deal" => 3, "user_id" => $userId, "platform_id" => $this->input["platform_id"], "platform_type" => $this->input["platform_type"]])->find();
                if ($buy_info) {
                    return [
                        "code" => 1,
                        "msg" => "请先平仓后再设置"
                    ];
                }
            }

            if ($data_setup["is_run"] == 0) {
                $data = [
                    'platform_id' => $this->input["platform_id"],
                    'platform_type' => $this->input["platform_type"],
                    'symbol' => $this->input["symbol"],
                    'qb_first' => $this->input["qb_first"],
                    'is_double' => $this->input["is_double"],
                    "user_id" => $userId,
                    'rounds' => $this->input['round'],
                    'down_stop_per' => $up_stop_part,
                    'down_back_per' => $this->input['down_back_per'],//止损回调百分比  补仓回调
                    'up_stop_per' => $down_stop_part,
                    'up_back_per' => $this->input['up_back_per'],//止盈回调百分比
                    'is_run' => 1,
                    'is_loop' => $this->input["is_loop"],
                    'open_type' => $open_type,
                    'lever' => $lever,
                    'bail' => $bail,
                    'up_back_scale' => $up_back_scale

                ];
                if ($this->input["platform_type"] == 2){
                    $data['qb_first']=$this->input["qb_first"]*$this->input["lever"];
                }
                QuantSetup::where(["id" => $data_setup["id"]])->update($data);
                //先删除再添加
                QuantSetupUp::where(["setup_id" => $data_setup["id"]])->delete();
                QuantSetupDown::where(["setup_id" => $data_setup["id"]])->delete();

                if (is_array($this->input["up_stop_part"])) {
                    //如果设置循环止盈比例  则策略止盈比例为第一条数据
                    foreach ($this->input["up_stop_part"] as $item) {
                        QuantSetupUp::create([
                            "user_id" => $userId,
                            "platform_id" => $this->input["platform_id"],
                            "platform_type" => $this->input["platform_type"],
                            "symbol" => $this->input["symbol"],
                            "rounds" => $item["round"],
                            "up_stop_per" => $item["up_stop_per"],
                            "setup_id" => $data_setup["id"]
                        ]);
                    }
                } else {

                    for ($round = 1; $round <= $this->input['round']; $round++) {
                        QuantSetupUp::create([
                            "user_id" => $userId,
                            "platform_id" => $this->input["platform_id"],
                            "platform_type" => $this->input["platform_type"],
                            "symbol" => $this->input["symbol"],
                            "rounds" => $round,
                            "up_stop_per" => $this->input["up_stop_per"],
                            "setup_id" => $data_setup["id"]
                        ]);
                    }

                }
                //补仓
                if (is_array($this->input["down_stop_part"])) {
                    foreach ($this->input["down_stop_part"] as $item) {
                        QuantSetupDown::create([
                            "user_id" => $userId,
                            "platform_id" => $this->input["platform_id"],
                            "platform_type" => $this->input["platform_type"],
                            "symbol" => $this->input["symbol"],
                            "rounds" => $item["round"],
                            "up_stop_per" => $item["down_stop_per"],
                            "setup_id" => $data_setup["id"],
                            "exp" => $item["exp"]
                        ]);
                    }
                } else {
                    for ($round = 1; $round <= $this->input['round']; $round++) {
                        QuantSetupDown::create([
                            "user_id" => $userId,
                            "platform_id" => $this->input["platform_id"],
                            "platform_type" => $this->input["platform_type"],
                            "symbol" => $this->input["symbol"],
                            "rounds" => $round,
                            "up_stop_per" => $this->input["down_stop_per"],
                            "setup_id" => $data_setup["id"],
                            "exp" => pow(2, $round - 1)
                        ]);
                    }

                }
            } else {
                return [
                    "code" => 1,
                    "msg" => "策略运行中，请去策略详细中查看"
                ];
            }


        }
        return [
            "code" => 0,
            "msg" => "操作成功"
        ];

    }

    /**
     * 保存我的策略  不适用
     */
    public function setup_save1($userId)
    {
        $validate = getValidate([
            'platform_id' => 'require',
            'platform_type' => 'require',
            'symbol' => 'require',
            'is_loop' => 'require',
            'qb_first' => 'require',
            'is_double' => 'require',
            'round' => 'require',
        ], [
            'platform_id.require' => '请选择平台',
            'platform_type.require' => '请选择类别',
            'symbol.require' => '请选择交易品种',
            'is_loop.require' => '请选择循环策略类型',
            'qb_first.require' => '请输入首单金额',
            'is_double.require' => '请输入首单是否加倍',
            'round.require' => '请输入做单数量'
        ]);
        if ($validate['code'] == 1) {
            return $validate;
        }

//        var_dump($this->input);die;
        //止损比例 只有合约有
        $up_back_scale = "";
        $lever = "";
        $open_type = 0;

        //合约账户
        if ($this->input["platform_type"] == 2) {
            //一会单独处理 TODU
            $validate = getValidate([
                'lever' => 'require|min:1|max:124',
                'open_type' => 'require',
            ], [
                'lever.require' => '合约倍数不能为空',
                'open_type.require' => '开仓方向不能为空',
            ]);
            if ($validate['code'] == 1) {
                return $validate;
            }
            $up_back_scale = 0.5;
            $lever = $this->input["lever"];
            $open_type = $this->input["open_type"];

            $member_service = new MemberService();
            $exchange = $member_service->sign($userId, $this->input["platform_id"]);
            if (!$exchange) {
                return [
                    "code" => 1,
                    "msg" => "请先设置API"
                ];
            }
            $trade = new Trade();
            $trade->set_leverage(["user_id" => $userId, "lever" => $this->input["lever"], "symbol" => $this->input["symbol"], "platform_id" => $this->input["platform_id"]]);

        }

        $strategy = QuantStrategy::where(["id" => $this->input["strategy_id"]])->find();
        if (!$strategy) {
            return [
                "code" => 1,
                "策略不存在"
            ];
        }
        $strategy_data_json = json_decode($strategy["data"], true);

        $data_setup = QuantSetup::where(["symbol" => $this->input["symbol"], "user_id" => $userId, "platform_id" => $this->input["platform_id"], "platform_type" => $this->input["platform_type"]])->find();
        if (!$data_setup) {
            $data = [
                'platform_id' => $this->input["platform_id"],
                'platform_type' => $this->input["platform_type"],
                'symbol' => $this->input["symbol"],
//                'strategy_id' => $this->input["strategy_id"],
                'qb_first' => $this->input["qb_first"],
                'is_double' => $this->input["is_double"],
                "user_id" => $userId,
                'rounds' => $strategy['rounds'],
                'down_stop_per' => $strategy['down_stop_per'],
                'down_back_per' => $strategy['down_back_per'],
                'up_stop_per' => $strategy['up_stop_per'],
                'up_back_per' => $strategy['up_back_per'],
                'is_run' => 0,
                'is_loop' => 0,
                'open_type' => $open_type,
                'lever' => $lever,
                'up_back_scale' => $up_back_scale
            ];
            $data = QuantSetup::create($data);

            foreach ($strategy_data_json as $key => $value) {
                QuantSetupUp::create([
                    "user_id" => $userId,
                    "platform_id" => $this->input["platform_id"],
                    "platform_type" => $this->input["platform_type"],
                    "symbol" => $this->input["symbol"],
                    "rounds" => $value["rounds"],
                    "up_stop_per" => $value["up_stop_per"],
                    "setup_id" => $data["id"]
                ]);
                QuantSetupDown::create([
                    "user_id" => $userId,
                    "platform_id" => $this->input["platform_id"],
                    "platform_type" => $this->input["platform_type"],
                    "symbol" => $this->input["symbol"],
                    "rounds" => $value["rounds"],
                    "down_stop_per" => $value["down_stop_per"],
                    "exp" => $value["exp"],
                    "setup_id" => $data["id"]
                ]);
            }
        } else {
            //判断是否已经开启并且已经买入
            if ($this->input["platform_type"] == 2) {
                //判断是否已经买进
                $buy_info = QuantMarketBuy::where(["symbol" => $this->input["symbol"], "is_sale" => 0, "is_deal" => 3, "user_id" => $userId, "platform_id" => $this->input["platform_id"], "platform_type" => $this->input["platform_type"]])->find();
                if ($buy_info) {
                    return [
                        "code" => 1,
                        "msg" => "请先平仓后再设置"
                    ];
                }
            }

            if ($data_setup["is_run"] == 1) {
                return [
                    "code" => 1,
                    "msg" => "请先停止交易再进行设置"
                ];
            }
            $data = [
                'strategy_id' => $this->input["strategy_id"],
                'qb_first' => $this->input["qb_first"],
                'is_double' => $this->input["is_double"],
                'rounds' => $strategy['rounds'],
                'down_stop_per' => $strategy['down_stop_per'],
                'down_back_per' => $strategy['down_back_per'],
                'up_stop_per' => $strategy['up_stop_per'],
                'up_back_per' => $strategy['up_back_per'],
                'open_type' => $open_type,
                'lever' => $lever,
                'up_back_scale' => $up_back_scale
            ];
            QuantSetup::where(["id" => $data_setup["id"]])->update($data);
            //先删除再添加
            QuantSetupUp::where(["setup_id" => $data_setup["id"]])->delete();
            QuantSetupDown::where(["setup_id" => $data_setup["id"]])->delete();
            foreach ($strategy_data_json as $key => $value) {
                QuantSetupUp::create([
                    "user_id" => $userId,
                    "platform_id" => $data_setup["platform_id"],
                    "platform_type" => $data_setup["platform_type"],
                    "symbol" => $data_setup["symbol"],
                    "rounds" => $value["rounds"],
                    "up_stop_per" => $value["up_stop_per"],
                    "setup_id" => $data_setup["id"]
                ]);
                QuantSetupDown::create([
                    "user_id" => $userId,
                    "platform_id" => $data_setup["platform_id"],
                    "platform_type" => $data_setup["platform_type"],
                    "symbol" => $data_setup["symbol"],
                    "rounds" => $value["rounds"],
                    "down_stop_per" => $value["down_stop_per"],
                    "exp" => $value["exp"],
                    "setup_id" => $data_setup["id"]
                ]);
            }
        }
        return [
            "code" => 0,
            "msg" => "操作成功"
        ];
    }

    //启动机器人
    public function run($userId)
    {
        $validate = getValidate([
//            'platform_id' => 'require',
//            'platform_type' => 'require',
//            'symbol' => 'require',
            'setup_id' => 'require',
        ], [
//            'platform_id.require' => '请选择平台',
//            'platform_type.require' => '请选择类别',
//            'symbol.require' => '请选择交易品种',
            'setup_id.require' => '请选择交易品种',
        ]);
        if ($validate['code'] == 1) {
            return $validate;
        }

        $data_member = Member::where(["id" => $userId])->find();
        if ($data_member["rank"] == 0) {
            return [
                "code" => 1,
                "msg" => "账号尚未激活"
            ];
        }
        if (!Member::check_usdt($userId, 2)) {
            return [
                "code" => 1,
                "msg" => "账号余额不足"
            ];
        }
        $data_setup = QuantSetup::where(["id" => $this->input["setup_id"], "user_id" => $userId])->find();
        if (!$data_setup) {
            return [
                "code" => 1,
                "msg" => "请先设置策略"
            ];
        }
        QuantSetup::where(["id" => $data_setup["id"]])->update(["is_run" => 1]);
        return [
            "code" => 0,
            "msg" => "启动交易机器人成功"
        ];

    }

    //暂停机器人
    public function stop($userId)
    {
        $validate = getValidate([
//            'platform_id' => 'require',
//            'platform_type' => 'require',
//            'symbol' => 'require',
            'setup_id' => 'require',
        ], [
//            'platform_id.require' => '请选择平台',
//            'platform_type.require' => '请选择类别',
//            'symbol.require' => '请选择交易品种',
            'setup_id.require' => '请选择交易品种',
        ]);
        if ($validate['code'] == 1) {
            return $validate;
        }
        $data_setup = QuantSetup::where(["id" => $this->input["setup_id"], "user_id" => $userId])->find();
        if (!$data_setup) {
            return [
                "code" => 1,
                "msg" => "请先设置策略"
            ];
        }

        QuantSetup::where(["id" => $data_setup["id"]])->update(["is_run" => 2]);
        return [
            "code" => 0,
            "msg" => "暂停交易机器人成功"
        ];
    }


    //循环和单次策略
    public function loop($userId)
    {
        $validate = getValidate([
            'platform_id' => 'require',
            'platform_type' => 'require',
            'symbol' => 'require',
        ], [
            'platform_id.require' => '请选择平台',
            'platform_type.require' => '请选择类别',
            'symbol.require' => '请选择交易品种',
        ]);
        if ($validate['code'] == 1) {
            return $validate;
        }
        $data_setup = QuantSetup::where(["symbol" => $this->input["symbol"], "user_id" => $userId, "platform_id" => $this->input["platform_id"], "platform_type" => $this->input["platform_type"]])->find();
        if (!$data_setup) {
            return [
                "code" => 1,
                "msg" => "请先设置策略"
            ];
        }
        $data = [
            'is_loop' => ($data_setup['is_loop'] + 1) % 2
        ];

        QuantSetup::where(["id" => $data_setup["id"]])->update($data);
        return [
            "code" => 0,
            "msg" => "设置成功"
        ];
    }

    //清仓卖出
    public function clear($userId)
    {
        $validate = getValidate([

            'setup_id' => 'require',
        ], [

            'setup_id.require' => '请选择策略',
        ]);
        if ($validate['code'] == 1) {
            return $validate;
        }
        $data_market_item = QuantMarketItem::where(["is_sale" => 0, "setup_id" => $this->input["setup_id"], "user_id" => $userId])->find();
        if (!$data_market_item) {
            return [
                "code" => 1,
                "msg" => "暂没有需要清仓交易"
            ];
        }
        $this->model->startTrans();
        try {
            $this->model->where(["user_id" => $userId])->where('id', $this->input["setup_id"])->update(["is_run" => 3]);
            $data = [
                'user_id' => $userId,
                'symbol' => $data_market_item["symbol"],
                'serno' => $data_market_item['serno'],
                'order_id' => null,
                'qb_source' => $data_market_item['qb_to'],
                'item_qb_source' => $data_market_item['qb_source'],
                'platform_id' => $data_market_item['platform_id'],
                'platform_type' => $data_market_item['platform_type'],
                'lever' => $data_market_item['lever'],
                'open_type' => $data_market_item['open_type'],
                'price' => 0,
                'qb_to' => 0,
                'is_deal' => 0,
                'is_bonus' => 0,
                'setup_id' => $data_market_item['setup_id']
            ];
            QuantMarketSell::create($data);
            $this->model->commit();
            return [
                "code" => 0,
                "msg" => "清仓成功"
            ];
        } catch (\Exception $e) {
            return [
                "code" => 1,
                "msg" => "清仓失败"
            ];
            // 事务回滚
            $this->model->rollback();
        }
        //QuantMarketItem::where('id', $data_market_item['id'])->update(['is_sale' => 3]);

    }

    //一键补单
    public function fill($userId)
    {
        $validate = getValidate([
//            'platform_id' => 'require',
//            'platform_type' => 'require',
//            'symbol' => 'require',
            'amount' => 'require',
            'setup_id' => 'require',
        ], [
//            'platform_id.require' => '请选择平台',
//            'platform_type.require' => '请选择类别',
//            'symbol.require' => '请选择交易品种',
            'amount.require' => '补单金额不能为空',
            'setup_id.require' => '请选择策略',
        ]);
        if ($validate['code'] == 1) {
            return $validate;
        }

        $data_member = Member::where(["id" => $userId])->find();
        if ($data_member["rank"] == 0) {
            return [
                "code" => 1,
                "msg" => "账号尚未激活"
            ];
        }
        if (!Member::check_usdt($userId, 2)) {
            return [
                "code" => 1,
                "msg" => "账号余额不足"
            ];
        }
        $data_market_buy = QuantMarketBuy::where(["is_sale" => 0, 'is_deal' => 3, "setup_id" => $this->input["setup_id"]])->find();
        if (!$data_market_buy) {
            return [
                "code" => 1,
                "msg" => "暂无购买记录，无法补单"
            ];
        }
        $data_setup = QuantSetup::where(["id" => $this->input["setup_id"], "user_id" => $userId])->find();

        if ($data_market_buy['rounds'] >= $data_setup['rounds']) {
            return [
                "code" => 1,
                "msg" => "超出倍投上限"
            ];
        }
        if ($data_setup['is_run'] != 1) {
            return [
                "code" => 1,
                "msg" => "已停止运行"
            ];
        }
        $row_buy = QuantMarketBuy::where('serno', $data_market_buy['serno'])
            ->where('rounds', $data_market_buy['rounds'] + 1)
            ->find();
        if ($row_buy && $row_buy['is_deal'] < 4) {
            return [
                "code" => 1,
                "msg" => "操作失败"
            ];
        }
        if ($row_buy) {
            $data = [
                'qb_source' => $this->input['amount'],
                'is_deal' => 0,
                'is_sale' => 0
            ];
            QuantMarketBuy::where('id', $row_buy['id'])->update($data);
        } else {
            $data = [
                'user_id' => $data_market_buy['user_id'],
                'symbol' => $data_market_buy['symbol'],
                'rounds' => $data_market_buy['rounds'] + 1,
                'serno' => $data_market_buy['serno'],
                'qb_source' => $this->input['amount'],
                'price' => 0,
                'qb_to' => 0,
                'is_deal' => 0,
                'is_sale' => 0,
                'platform_id' => $data_market_buy['platform_id'],
                'platform_type' => $data_market_buy['platform_type'],
                'setup_id' => $data_market_buy['setup_id'],
            ];
            QuantMarketBuy::create($data);
        }
        return [
            "code" => 0,
            "msg" => "补单已请求"
        ];
    }


    public function trade_history_log($userId)
    {

        $validate = getValidate([
            'setup_id' => 'require',
        ], [
            'setup_id.require' => '请选择策略',
        ]);
        if ($validate['code'] == 1) {
            return $validate;
        }

        $data_setup = QuantSetup::where(["user_id" => $userId, "id" => $this->input["setup_id"]])->find();

        $buy = QuantMarketBuy::where(["user_id" => $userId])->whereIn("setup_id", [$data_setup["id"]])->order('id', 'desc')->limit(100)->select()->toArray();
        $sell = QuantMarketSell::where(["user_id" => $userId])->whereIn("setup_id", [$data_setup["id"]])->order('id', 'desc')->limit(100)->select()->toArray();
        if (empty($buy) && empty($sell)) {
            return [
                'code' => 1,
                'data' => []
            ];
        }
        foreach ($buy as $key => &$value) {
            $value["type"] = "buy";
            $value["type_name"] = "买入";

            $value["is_bonus"] = "";
            $value["is_bonus_name"] = "-";

            $value["qb_float"] = "-";
            $value["per_float"] = "-";

            $value["is_deal_name"] = "未成交";
            if ($value["is_deal"] == 3) {
                $value["is_deal_name"] = "已成交";
            }
            if ($value["is_deal"] == 4) {
                $value["is_deal_name"] = "成交失败";
            }
            $value["is_sale_name"] = "未卖出";
            if ($value["is_sale"] == 1) {
                $value["is_sale_name"] = "已卖出";
            }

            if ($value["is_sale"] == 2) {
                $value["is_sale_name"] = "卖出失败";
            }
        }
        foreach ($sell as $key => &$value) {
            $value["type"] = "sell";
            $value["type_name"] = "卖出";

            $value["is_sale"] = "";
            $value["is_sale_name"] = "-";

            $value["qb_float"] = "-";
            $value["per_float"] = "-";

            $value["is_deal_name"] = "未处理";
            if ($value["is_deal"] == 2) {
                $value["is_deal_name"] = "已成交";
            }
            if ($value["is_deal"] == 3) {
                $value["is_deal_name"] = "成交失败";
            }

            $value["is_bonus_name"] = "未处理";
            if ($value["is_bonus"] == 1) {
                $value["is_bonus_name"] = "已结算";
            }

            if ($value["open_type"] != 3) {
                $value['qb_float'] = bcsub($value["qb_to"], $value['item_qb_source'], 2);
                $value['per_float'] = getBcRound($value['qb_float'] * 100 / $value['item_qb_source'], 2);// ;
            } else {
                $value['qb_float'] = bcsub($value['item_qb_source'], $value["qb_to"], 2);
                $value['per_float'] = getBcRound($value['qb_float'] * 100 / $value['item_qb_source'], 2);
            }
        }
        $data = array_merge($buy, $sell);
        $add_time = array_column($data, 'create_time');
        array_multisort($add_time, SORT_DESC, $data);
        if (!$data) {
            return [
                'code' => 1,
                'data' => []
            ];
        }
        foreach ($data as &$key) {
            $key['qb_source'] = sprintf("%.2f", $key['qb_source']);
        }
        return $data;
    }
}
