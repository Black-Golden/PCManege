<?php 
// +----------------------------------------------------------------------
// | RXThinkCMF框架 [ RXThinkCMF ]
// +----------------------------------------------------------------------
// | 版权所有 2017~2020 南京RXThinkCMF研发中心
// +----------------------------------------------------------------------
// | 官方网站: http://www.rxthink.cn
// +----------------------------------------------------------------------
// | Author: 牧羊人 <1175401194@qq.com>
// +----------------------------------------------------------------------

namespace app\common\service;


use app\common\model\Member;
use app\common\model\Product;
use app\common\model\ProductOrder;
use app\common\model\QuantWallet;

/**
 * 产品列管理-服务类
 * @author 测试
 * @since: 2023/09/26
 * Class ProductService
 * @package app\adminapi\service
 */
class ProductService extends BaseService
{
    /**
     * 构造函数
     * LevelService constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->model = new Product();
    }

	/**
     * 获取数据列表
     * @return array
     * @since 2023/09/26
     * @author 测试
     */
    public function getList()
    {
        $param = $this->input;

        // 查询条件
        $map = [];

	
	    // 策略名称
        $name = isset($param['name']) ? trim($param['name']) : '';
        if ($name) {
            $map[] = ['name', 'like', "%{$name}%"];
        }
	
        return parent::getList($map); // TODO: Change the autogenerated stub
    }


    public function save($userId){
        $param = $this->input;

        $validate = getValidate([
            'product_id' => 'require',
            'invest' => 'require',
            'platform_id' => 'require',
            'break_even' => 'require',
            'bonus' => 'require',
        ], [
            'product_id.require' => '请选择产品',
            'invest.require' => '请选择投资金额',
            'platform_id.require' => '请选择托管平台',
            'break_even.require' => '请选择保本比例',
            'bonus.require' => '请选择分红比例',
        ]);
        if ($validate['code'] == 1) {
            return $validate;
        }
        //计算出用户的保证金
        $money =$param['invest']*$param['break_even']/100;
        $user_money = Member::where('id',$userId)->value('qb_usdt');
        if($money>$user_money){
            return ['code'=>1,'msg'=>"余额不足"];
        }
        Member::where('id',$userId)->update(['qb_usdt'=>$user_money-$money]);

        ProductOrder::insert([
            'product_id' => $param['product_id'],
            'invest' =>$param['invest'],
            'platform_id' =>$param['platform_id'],
            'break_even' =>$param['break_even'],
            'bonus' =>$param['bonus'],
            'user_id' =>$userId,
            'status' =>1,
        ]);
//        $username= Member::where('id',$userId)->value('username');
        $insert=[
            'user_id'=>$userId,
            'num'=>$money,
            'type_id'=>5,
            'memo'=>'开通产品扣除手续费'.$money.'USDT',
            'create_time'=>time(),
            'payment_id'=>1,

        ];
QuantWallet::insert($insert);
        return true;


    }




                                                                                
}
