<?php 
// +----------------------------------------------------------------------
// | RXThinkCMF框架 [ RXThinkCMF ]
// +----------------------------------------------------------------------
// | 版权所有 2017~2020 南京RXThinkCMF研发中心
// +----------------------------------------------------------------------
// | 官方网站: http://www.rxthink.cn
// +----------------------------------------------------------------------
// | Author: 牧羊人 <1175401194@qq.com>
// +----------------------------------------------------------------------

namespace app\common\service;


use app\common\model\DictData;
use app\common\model\News;
use app\common\model\Dept;
use app\common\model\AdminUser;
use think\facade\Db;

/**
 * 消息记录管理-服务类
 * @author 测试
 * @since: 2021/12/24
 * Class NewsService
 * @package app\adminapi\service
 */
class NewsService extends BaseService
{
    /**
     * 构造函数
     * LevelService constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->model = new News();
        $this->dept_model = new Dept();
        $this->admin_model = new AdminUser();
    }

	/**
     * 获取数据列表
     * @return array
     * @since 2021/12/24
     * @author 测试
     */
    public function getList()
    {
        $param = $this->input;

        // 查询条件
        $map = [];

	
	    // 通知标题
        $title = isset($param['title']) ? trim($param['title']) : '';
        if ($title) {
            $map[] = ['title', 'like', "%{$title}%"];
        }
		
	    // 状态
        $status = isset($param['status']) ? (int)$param['status'] : 0;
        if ($status) {
            $map[] = ['status', '=', $status];
        }
	
        return parent::getList($map); // TODO: Change the autogenerated stub
    }
    /**
     * 获取数据列表 我发送的 我收到的
     * @return array
     * @since 2021/12/24
     * @author 测试
     */
    public function getUserList($ids,$id)
    {
        $param = $this->input;

        // 查询条件
        $map = [];



           //我发送的  examine_status
           if($ids){
               $map[] = ['create_user', '=', $ids];

           }
        //我收到的
           if($id){
               $map[] = ['user_id', '=', $id];
               unset($param['pid']);
           }


        return parent::getList($map); // TODO: Change the autogenerated stub
    }
    /**
     * 查看消息记录
     */
    public function readAllNews($user_id){
        $data = $this->input;
        // 验证器 验证
        $validate = getValidate([
            'id' => 'require',
        ], [
            'id.require' => '请选择消息',
        ]);
        if ($validate['code'] == 1) {
            return return_json($validate);
        }
        //获取消息嘻嘻
        $id = $this->sun($data['id']);
        $id[]=(int)$data['id'];
        $map =[];
        $map[]=$map[] = ['id', 'in', $id];
        $info =$this->model
            ->where('id',"in",$id)
            ->order('create_time ASC')
            ->select()->toArray();
//        var_dump($info);die;
        foreach ($info as &$item) {
            $admin = new AdminUser();
            $item['user_info'] = $admin->getInfo($item['uesr_id']);
            $item['user_info'] =$item['user_info']['realname'];
            $item['create_info'] = $admin->getInfo($item['create_user']);
            $item['create_info'] =$item['create_info']['realname'];
            //获取字典值
            $dict = new DictData();
            $info['classificationa_name'] = $dict->getInfo($info['classification']);
            $info['classificationa_name'] =$info['classificationa_name']['name'];
        }
        return return_json(
            $returnData = [
                'code' => 0,
                'msg' => 'success',
                'data' => $info,
            ]
        );


    }
    /**
     * 取该职位下的所有子集
     */
    public function sun($id,$data=[]){

        $pids =$this->model
            ->where('pid',$id)
            ->column('id');
        if(count($pids)>0){
            foreach($pids as $v){
                $data[] = $v;
                $data = $this->sun($v,$data); //注意写$data 返回给上级
            }
        }
        if(count($data)>0){
            return $data;
        }else{
            return $data;
        }

    }


    /**
     * 添加消息
     * @param $user_id
     * @return \think\response\Json
     * @throws \think\db\exception\BindParamException
     */
    public function addNews($user_id){

        $data = $this->input;
        // 验证器 验证
        $validate = getValidate([
            'classification' => 'require',
            'content' => 'require',
            'uesr_id' => 'require',
        ], [
            'classification.require' => '请选择分类',
            'content.require' => '请输入内容',
            'uesr_id.require' => '请选择用户',

        ]);
        if ($validate['code'] == 1) {
            return return_json($validate);
    }
        if(isset($data['enclosure'])){
            if(is_array($data['enclosure'])){
                $data['enclosure']= implode(",",$data['enclosure']);
            }
        }

        //操作人员
        $update_user_id = isset($data['uesr_id']) ? $data['uesr_id'] : "";
        if ($update_user_id) {
            $arr = object_array2($update_user_id);

            if(!empty($arr)){
                for($i=0;$i<count($arr);$i++){
                    $arr1[] = $arr[$i][count($arr[$i])-1];
                }

                $arr3 = '';
                for($j=0;$j<count($arr1);$j++){
                    if(is_numeric($arr1[$j])){
                        $arr4 = Db::name('admin_user')->whereIn("dept_id",getDeptList($arr1[$j]))->column('id');
                        $arr3 .= implode(",",$arr4).',';
                    }else{
                        $arr3 .= substr($arr1[$j],0,-1).',';
                    }
                }
                $data['user_id'] = explode(',',substr($arr3,0,-1));//把字符串以，分开合成一个数组
                $data['user_id']=array_filter($data['user_id']);
            }
        }
        if($data['classification']==655){
            foreach ($data['user_id'] as $value){
                $data['user_id']=$value;
                $data['examine_status']=2;
                $updateData = return_update_user($data,$user_id);
                $updateData['create_user']=$user_id;
                $updateData['create_time']=time();
                $res = $this->model
                    ->insert($updateData);
            }
        }else{
            //PHP数组转字符串
            $data['user_id'] = implode(",",$data['user_id']);
            $data['create_time']=time();
            $updateData = return_update_user($data,$user_id);
            $updateData['create_user']=$updateData['update_user_id'];
            $updateData['create_time']=time();
            // 获取该数据
            $res = $this->model
                ->insert($updateData);
        }


        $returnData = [
            'code' => 1,
            'msg' => '添加失败'
        ];
        if ($res) {
            $returnData = [
                'code' => 0,
                'msg' => '添加成功'
            ];
        }

        return return_json($returnData);
    }

    /**
     * 消息审核
     * @param $user_id
     * @return \think\response\Json
     * @throws \think\db\exception\BindParamException
     */
    public function checkNews($user_id){
        $data = $this->input;
        // 验证器 验证
        $validate = getValidate([
            'examine_status'=> 'require',
            'id' => 'require',
        ], [
            'examine_status.require' => '请输入状态',
            'id.require' => '请选择消息',
        ]);
        if ($validate['code'] == 1) {
            return return_json($validate);
        }
//        $data['id']=[1,2];
        //消息状态
        $examine_status=$data['examine_status'];
        $sql = $this->model->where('id','in',$data['id']);


        if($examine_status == 2){


            $updateData=[];
            foreach ($data['id'] as $id){
                $info = $this->model->where('id',$id)->find()->toArray();
                $user_id = explode(',',$info['user_id']);//把字符串以，分开合成一个数组
                foreach ($user_id as $key){

                    $user = [
                        'user_id' => $key,
                        'create_user'=>$info['create_user'],
                        'classification'=>$info['classification'],
                        'status'=>$info['status'],
                        'enclosure'=>$info['enclosure'],
                        'title'=>$info['title'],
                        'content'=>$info['content'],
                        'create_time'=>time(),
                        'pid'=>$id,
                        'examine_status'=>$examine_status
                    ];
                    $updateData[] =return_update_user($user,$user_id);
                }


            }

            $res =$sql->update(['examine_status'=>2]);
            $res=$this->model->insertAll($updateData);
        }elseif ($examine_status == 3){
            $res =$sql->update(['examine_status'=>3]);
        }elseif ($examine_status == 5){
            $res =$sql->update(['examine_status'=>5]);
        }

        $returnData = [
            'code' => 1,
            'msg' => '操作失败'
        ];
        if ($res) {
            $returnData = [
                'code' => 0,
                'msg' => '操作成功'
            ];
        }

        return return_json($returnData);
    }
    /**
     * 查看消息
     */
    public function readNews($user_id){
        $data = $this->input;
        // 验证器 验证
        $validate = getValidate([
            'id' => 'require',
        ], [
            'id.require' => '请选择消息',
        ]);
        if ($validate['code'] == 1) {
            return return_json($validate);
        }
        //获取消息
        $info = $this->model->getInfo($data['id']);

        if($info['user_id']==$user_id){

            // 获取该数据
            $arr = $this->model
                ->where('id',$data['id'])
                ->update(['status'=>1]);
        }

        return return_json(
            $returnData = [
                'code' => 0,
                'msg' => 'success',
                'data' => $info,
            ]
        );


    }

    /**
     * 回复消息
     */
    public function createNews($user_id){
        $data = $this->input;
        // 验证器 验证
        $validate = getValidate([
            'id' => 'require',
            'content' => 'require',
        ], [
            'id.require' => '请选择消息',
            'content.require' => '请输入内容',
        ]);
        if ($validate['code'] == 1) {
            return return_json($validate);
        }
        //获取消息嘻嘻
        $info = $this->model->getInfo($data['id']);
        $updateData =[
            'content' => $data['content'],
            'uesr_id' => $info['create_user'],
            'pid' => $data['id'],
            'classification' => $data['classification'],
            'create_user' => $user_id,
            'create_time' => time(),
        ];

        $updateData= return_update_user($updateData, $user_id);
//        var_dump($updateData);die;
        // 获取该数据
        $res = $this->model
            ->insert($updateData);
        $returnData = [
            'code' => 1,
            'msg' => '回复失败'
        ];
        if ($res) {
            $returnData = [
                'code' => 0,
                'msg' => '回复成功'
            ];
        }

        return return_json($returnData);


    }

    /**
     * 获取该用户的所有信息
     * @return array
     * @since 2021/12/22
     * @author 测试
     */
    public function allNews($user_id)
    {

        // 查询条件
        $map = [];

        // 验证器 验证
        $validate = getValidate([
            'classification' => 'require',
        ], [
            'classification.require' => '请输入分类',


        ]);
        if ($validate['code'] == 1) {
            return return_json($validate);
        }

        $param = $this->input;
        if($param['classification']){
            $map[] = ['classification', '=', $param['classification']];
        }
        $map[] = ['user_id', '=', $user_id];
        $map[] = ['status', '=', 2];


        return parent::getList($map); // TODO: Change the autogenerated stub
    }

    /**
     * 查看接收人
     * @return array
     * @since 2021/12/22
     * @author 测试
     */
    public function allUser($user_id)
    {

        // 查询条件
        $map = [];

        // 验证器 验证
        $validate = getValidate([
            'id' => 'require',
        ], [
            'id.require' => '请选择消息',


        ]);
        if ($validate['code'] == 1) {
            return return_json($validate);
        }
        $param = $this->input;
        $info = $this->model->where('id',$param['id'])->find()->toArray();
        //获取所有用户


        $user = $this->admin_model->where('id',"in",$info['user_id'])->select();
        if($user){
            $updateData=[];
            $user =$user->toArray();
            foreach ($user as $k){
                $updateData[] =return_update_user([],$k['id']);
            }
        }

        return return_json(
            $returnData = [
                'code' => 0,
                'msg' => 'success',
                'data' => $updateData,
            ]
        );
//        return parent::getList($map); // TODO: Change the autogenerated stub
    }

    /**
     * 获取消息详情
     * @return array
     * @since 2021/12/22
     * @author 测试
     */
    public function newsInfo()
    {

        // 查询条件
        $map = [];

        // 验证器 验证
        $validate = getValidate([
            'id' => 'require',
        ], [
            'id.require' => '请选择消息',


        ]);
        if ($validate['code'] == 1) {
            return return_json($validate);
        }
        $param = $this->input;
        //获取消息
//        $info = $this->model->where('id',$param['id'])->find()->toArray();
        $info = $this->model->getInfo($param['id']);
        //分类
        $classification = $info['classification'];
        if($classification == 655){
//            $user = $this->admin_model->where('id',$info['user_id'])->find();

        }else{
            //已读
            $read = $this->model->where('pid',$param['id'])->where('status',1)->select();
//            var_dump($read);die;
            if ($read){
                $read= $read->toArray();
                $id = array_column($read, 'user_id');

                $user = $this->admin_model->where('id',"in",$id)->select();
                if($user){
                    $user= $user->toArray();
                    $name=array_column($user, 'realname');
                    $info['read']= implode(",",$name);
                }
//                var_dump($user);die;

            }
            //wei读
            $read = $this->model->where('pid',$param['id'])->where('status',2)->select();
            if ($read){
                $read= $read->toArray();
                $id = array_column($read, 'user_id');
                $user = $this->admin_model->where('id',"in",$id)->select();
                if($user){
                    $user= $user->toArray();
                    $name=array_column($user, 'realname');
                    $info['unread']= implode(",",$name);
                }

            }
        }

//        $data[] = $info;

        return return_json(
            $returnData = [
                'code' => 0,
                'msg' => 'success',
                'data' => $info,
            ]
        );
//        return parent::getList($map); // TODO: Change the autogenerated stub
    }
}
