<?php
// +----------------------------------------------------------------------
// | RXThinkCMF框架 [ RXThinkCMF ]
// +----------------------------------------------------------------------
// | 版权所有 2017~2020 南京RXThinkCMF研发中心
// +----------------------------------------------------------------------
// | 官方网站: http://www.rxthink.cn
// +----------------------------------------------------------------------
// | Author: 牧羊人 <1175401194@qq.com>
// +----------------------------------------------------------------------

namespace app\common\service;


use app\common\model\Member;
use app\common\model\PlatformMember;
use app\common\model\SingleLoopBuy;
use app\common\model\SingleLoopSell;
use app\common\model\SingleLoopSetup;
use app\common\model\TradeProfit;
use app\extend\Trade;
use think\facade\Db;

/**
 * 用户每日收益管理-服务类
 * @author 测试
 * @since: 2022/01/23
 * Class QuantProfitService
 * @package app\adminapi\service
 */
class TradeProfitService extends BaseService
{
    /**
     * 构造函数
     * LevelService constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->model = new TradeProfit();
        $memodel = new Member();
    }

    public function getList()
    {
        $param = $this->input;

        // 查询条件
        $map = [];


        // 平台名称
        $order_id = isset($param['order_id']) ? trim($param['order_id']) : '';
        if ($order_id) {
            $map[] = ['order_id', 'like', "%{$order_id}%"];
        }
        $symbol = isset($param['symbol']) ? trim($param['symbol']) : '';
        if ($symbol) {
            $symbol = strtoupper($symbol);
            $map[] = ['symbol', 'like', "%{$symbol}%"];
        }

        // 平台名称
        $user_name = isset($param['user_name']) ? trim($param['user_name']) : '';
        if ($user_name) {
            $ids = Member::where('username', 'like', "%{$user_name}%")->column('id');
            $map[] = ['user_id', 'in', $ids];
        }


        // 是否成交
        $open_type = isset($param['open_type']) ? (int)$param['open_type'] : 0;
        if ($open_type) {
            $map[] = ['open_type', '=', $open_type];
        }

        // 是否成交
        $type = isset($param['type']) ? (int)$param['type'] : 0;
        if ($type) {
            $map[] = ['type', '=', $type];
        }


        return parent::getList($map, [], 0, 1); // TODO: Change the autogenerated stub
    }


    public function set_profit()
    {
        $sell_data = SingleLoopSell::where(["is_deal" => 2, "is_bonus" => 0, "is_cut" => 0])->where("create_time", "<", time() - 100)->select()->toArray();

        if (empty($sell_data)) return;
        foreach ($sell_data as $key => $value) {
            $fee = 0;
            //查询当前订单是否有斩仓
            $cut_profit = SingleLoopSell::where(["is_deal" => 2, "is_cut" => 1, "cut_sell_id" => $value["id"]])->sum("profit_usdt");
            if ($cut_profit) {
                $value["profit_usdt"] = $value["profit_usdt"] - abs($cut_profit);
            }
            if ($value["profit_usdt"] > 0) {
                $fee = getBcRound($value["profit_usdt"] * get_config('platform_fee', 1) / 100, 6);
            }
            $this->model->startTrans();
            try {
                if ($value["open_type"] == 2) {
                    $open_type = "-多 ";
                } else {
                    $open_type = "-空 ";
                }
                $message = $value['symbol'] . "永续合约" . $open_type . " 盈利" . $value["profit_usdt"];
                if ($value["profit_usdt"] > 0) {
                    $param = [
                        'user_id' => $value["user_id"],
                        "qb_usdt" => -$fee,
                        "usdt_memo" => $message . " 盈利服务费" . $fee,
                        "usdt_type_id" => 5,
                    ];
                    Member::setUsdt($param);
                }
                TradeProfit::create([
                    "user_id" => $value["user_id"],
                    "type_id" => 2,
                    "plot_id" => 3,
                    "setup_id" => $value["setup_id"],
                    "order_id" => $value["order_id"],
                    "open_type" => $value["open_type"],
                    "symbol" => $value["symbol"],
                    "profit_usdt" => $value["profit_usdt"],
                    "trade_time" => strtotime($value["create_time"]),
                    "platform_fee" => $fee,
                ]);
                SingleLoopSell::where(["id" => $value["id"]])->update(["is_bonus" => 1]);
                //奖励用户金额
                $service = new TeamService();
                $top = $service->per_top($value["user_id"]);

                if ($fee > 0) {
                    $fee_per = $fee * 2 * 0.1;
                    $param = [
                        'user_id' => 1,
                        "qb_usdt" => $fee_per,
                        "usdt_memo" => "总资金账户收入 " . $fee_per,
                        "usdt_type_id" => 6,
                    ];
                    Member::setUsdt($param);

                    if ($top["one_list"]) {
                        //直推奖励
                        $fee_per = $fee * $top["one_list"]["per"] * 0.1;
                        $param = [
                            'user_id' => $top["one_list"]["id"],
                            "qb_usdt" => $fee_per,
                            "usdt_memo" => "直推用户盈利，奖励" . $fee_per,
                            "usdt_type_id" => 6,
                        ];
                        Member::setUsdt($param);
                    }
                    if ($top["two_list"]) {
                        foreach ($top["two_list"] as $k => $v) {
                            //直推奖励
                            $fee_per = $fee * $v["per"] * 0.1;
                            $param = [
                                'user_id' => $v["id"],
                                "qb_usdt" => $fee_per,
                                "usdt_memo" => "团队用户盈利，奖励" . $fee_per,
                                "usdt_type_id" => 4,
                            ];
                            Member::setUsdt($param);
                        }
                    }
                }
                $this->model->commit();
            } catch (\Exception $e) {
                user_log($e->getMessage(), "a3");
                // echo $e->getMessage();
                // 事务回滚
                $this->model->rollback();
            }
        }
        $this->get_user_profit();

    }

    /**
     * 普通用户 role_id = 0
     * 获取用户的
     * 历史盈利 及其胜率
     * 当日盈利
     * 合约 及其胜率
     * 现货 及其胜率
     */

    public function get_user_profit()
    {
        $user_info = Member::where('mark', 1)->select();
        $service = new TeamService();

        foreach ($user_info as $key => $value) {
            $data = [
                'qb_profit_all' => 0,//我的总收入
                'qb_profit_today' => 0,//我的今日盈利
                'qb_team_all' => 0,//团队总收入（我的一级和二级）
                'qb_team_today' => 0,//团队今日收入
                'qb_child_today' => 0,//团队今日直推收入
                'qb_indirect_today' => 0,//团队今日j间推收入
                'team_all' => 0,//直推加间推
            ];
            $user_ids = $service->team($value["id"]);
            if (isset($user_ids[0])) {
                $qb_child_today = $this->model->whereIn('user_id', $user_ids[0])->whereTime('create_time', 'today')->where('profit_usdt',">",0)->sum('profit_usdt');
                $data["qb_child_today"] = $qb_child_today;
                $data["qb_team_today"] += $qb_child_today;
                $data["team_all"] += count($user_ids[0]);
                //一级团队收入
                $data["qb_team_all"] += Member::whereIn('id', $user_ids[0])->sum('qb_profit_all');
            }
            if (isset($user_ids[1])) {
                $qb_indirect_today = $this->model->whereIn('user_id', $user_ids[1])->whereTime('create_time', 'today')->where('profit_usdt',">",0)->sum('profit_usdt');
                $data["qb_indirect_today"] = $qb_indirect_today;
                $data["qb_team_today"] += $qb_indirect_today;
                $data["team_all"] += count($user_ids[1]);
                $data["qb_team_all"] += Member::whereIn('id', $user_ids[1])->sum('qb_profit_all');
            }

            //团队总收益
            //合约收益
            ////今日盈利
            $qb_profit_today = $this->model->where('user_id', $value["id"])->whereTime('create_time', 'today')->where('profit_usdt',">",0)->sum('profit_usdt');
            $data['qb_profit_all'] = $this->model->where('user_id', $value["id"])->where('profit_usdt', '>', '0')->sum('profit_usdt');
            $data['qb_profit_today'] = $qb_profit_today;
            $rank_lever_usdt = $data['qb_profit_all'] + $data["qb_team_all"];
            //升级
            if ($value["is_auto_rank"] == 0) {
                $data["rank"] = 0;
                if ($rank_lever_usdt >= 1000) {
                    $data["rank"] = 1;
                }
                if ($rank_lever_usdt >= 5000) {
                    $data["rank"] = 2;
                }
                if ($rank_lever_usdt >= 10000) {
                    $data["rank"] = 3;
                }
                if ($rank_lever_usdt >= 20000) {
                    $data["rank"] = 4;
                }
                if ($rank_lever_usdt >= 50000) {
                    $data["rank"] = 5;
                }
                if ($rank_lever_usdt >= 100000) {
                    $data["rank"] = 6;
                }
                if ($rank_lever_usdt >= 200000) {
                    $data["rank"] = 7;
                }
            }
            Member::where('id', $value["id"])->update($data);
        }
    }


    public function get_user_profit1($user_id)
    {
        $user_info = Member::where('mark', 1)->where(["id"=>$user_id])->select();
        $service = new TeamService();

        foreach ($user_info as $key => $value) {
            $data = [
                'qb_profit_all' => 0,//我的总收入
                'qb_profit_today' => 0,//我的今日盈利
                'qb_team_all' => 0,//团队总收入（我的一级和二级）
                'qb_team_today' => 0,//团队今日收入
                'qb_child_today' => 0,//团队今日直推收入
                'qb_indirect_today' => 0,//团队今日j间推收入
                'team_all' => 0,//直推加间推
            ];
            $user_ids = $service->team($value["id"]);
            if (isset($user_ids[0])) {
                $qb_child_today = $this->model->whereIn('user_id', $user_ids[0])->whereTime('create_time', 'today')->where('profit_usdt',">",0)->sum('profit_usdt');
                $data["qb_child_today"] = $qb_child_today;
                $data["qb_team_today"] += $qb_child_today;
                $data["team_all"] += count($user_ids[0]);
                //一级团队收入
                $data["qb_team_all"] += Member::whereIn('id', $user_ids[0])->sum('qb_profit_all');
            }
            if (isset($user_ids[1])) {
                $qb_indirect_today = $this->model->whereIn('user_id', $user_ids[1])->whereTime('create_time', 'today')->where('profit_usdt',">",0)->sum('profit_usdt');
                $data["qb_indirect_today"] = $qb_indirect_today;
                $data["qb_team_today"] += $qb_indirect_today;
                $data["team_all"] += count($user_ids[1]);
                $data["qb_team_all"] += Member::whereIn('id', $user_ids[1])->sum('qb_profit_all');
            }

            //团队总收益
            //合约收益
            ////今日盈利
            $qb_profit_today = $this->model->where('user_id', $value["id"])->whereTime('create_time', 'today')->where('profit_usdt',">",0)->sum('profit_usdt');
            $data['qb_profit_all'] = $this->model->where('user_id', $value["id"])->where('profit_usdt', '>', '0')->sum('profit_usdt');
            $data['qb_profit_today'] = $qb_profit_today;


            $rank_lever_usdt = $data['qb_profit_all'] + $data["qb_team_all"];
            //升级
            if ($value["is_auto_rank"] == 0) {
                $data["rank"] = 0;
                if ($rank_lever_usdt >= 1000) {
                    $data["rank"] = 1;
                }
                if ($rank_lever_usdt >= 5000) {
                    $data["rank"] = 2;
                }
                if ($rank_lever_usdt >= 10000) {
                    $data["rank"] = 3;
                }
                if ($rank_lever_usdt >= 20000) {
                    $data["rank"] = 4;
                }
                if ($rank_lever_usdt >= 50000) {
                    $data["rank"] = 5;
                }
                if ($rank_lever_usdt >= 100000) {
                    $data["rank"] = 6;
                }
                if ($rank_lever_usdt >= 200000) {
                    $data["rank"] = 7;
                }
            }
            print_r($data);
            exit;
            //Member::where('id', $value["id"])->update($data);
        }
    }
    /**
     * 更新排名
     */
    public function ranking($page = 1, $ranking = 1)
    {
        $list = Member::order('id', 'desc')->find();
//        var_dump($list['id']/20+1);
        if ($list['id'] / 20 + 1 < $page) {
            echo 12;
            die;
        }
//        echo 22;
        $list = Member::order('qb_profit_all', 'desc')->page($page)->limit(20)->select();
        foreach ($list as $key) {
            Member::where('id', $key['id'])->update(['ranking' => $ranking]);
            $ranking++;
        }
        return self::ranking($page + 1, $ranking * $page);
    }

    /**
     * 获取数据列表
     * @return array
     * @since 2022/01/23
     * @author 测试
     */
    public function get_profit_list($userId)
    {
        $param = $this->input;
        $map = [];
        // 查询条件
        $map[] = ['user_id', '=', $userId];
        if ($param['screen'] == 'history') {
            return parent::getList($map); // TODO: Change the autogenerated stub
        }
        $map[] = ['create_time', '>', mktime(0, 0, 0, date('m'), date('d'), date('Y'))];
        $map[] = ['create_time', '<', mktime(0, 0, 0, date('m'), date('d') + 1, date('Y')) - 1];
        return parent::getList($map); // TODO: Change the autogenerated stub

    }

    public function order()
    {
        $trade = new Trade();
        $trade_order = $trade->order([
            "user_id" => 1104633,
            "platform_id" => 3
        ]);
        print_r($trade_order);
    }

    //同步用户订单
    public function sync()
    {
        //查询
        $user_list = SingleLoopSetup::where(["is_run" => 1])->column("user_id");
        $buy_list = SingleLoopBuy::whereIn("user_id", $user_list)->where(["is_sell" => 0, "is_deal" => 2])->order("rounds", "asc")->select()->toArray();
        $user_list = [];
        $check = $new = [];
        foreach ($buy_list as $key => $value) {
            $check[$value["user_id"] . "-" . $value["platform_id"]][$value["symbol"] . "-" . $value["open_type"]]["setup_id"] = $value["setup_id"];
            // $check[$value["user_id"] . "-" . $value["platform_id"]][$value["symbol"] . "-" . $value["open_type"]]["min_token"] = $value["min_token"];
            $check[$value["user_id"] . "-" . $value["platform_id"]][$value["symbol"] . "-" . $value["open_type"]]["last_qb_token"][] = $value["last_qb_token"];
        }
        $trade = new Trade();
//        $trade_order = $trade->order([
//            "user_id" => 1104628,
//            "platform_id" => 3
//        ]);
//
//        print_r($trade_order);
//        exit;
        foreach ($check as $key => &$value) {
            $now = explode("-", $key);

            $user_id = $now[0];
            $platform_id = $now[1];

            $trade_order = $trade->order([
                "user_id" => $user_id,
                "platform_id" => $platform_id
            ]);
            foreach ($value as $k => &$v) {
                //就是仓位卖完了没有这个仓位
                $v["trade_qb_token"] = 0;
                $last_qb_token = array_sum($v["last_qb_token"]);
                if (isset($trade_order[$k])) {
                    $v["trade_qb_token"] = $trade_order[$k]["qb_token"];
                }
                $data = explode("-", $k);
                $v["last_qb_token"] = $last_qb_token;
                $v["symbol"] = $data[0];
                $v["open_type"] = $data[1];
                if ($v["trade_qb_token"] != $v["last_qb_token"]) {
                    $new[] = [
                        "user_id" => $user_id,
                        "platform_id" => $platform_id,
                        "trade_qb_token" => $v["trade_qb_token"],
                        "last_qb_token" => $v["last_qb_token"],
                        "symbol" => $data[0],
                        "open_type" => $data[1],
                        "setup_id" => $v["setup_id"],
                    ];
                }
            }
        }
        //判断数据
        foreach ($new as $key => $value) {
            //判断交易所数据
            if ($value["trade_qb_token"] == 0) {
                //优化数据，恢复
                trade_log("检测交易所暂无仓位，已停止监控", $value);
                user_log("检测交易所暂无仓位，已停止监控", $value["setup_id"]);
                SingleLoopSetup::where(["symbol" => $value["symbol"], "open_type" => $value["open_type"], "user_id" => $value["user_id"], "platform_id" => $value["platform_id"]])->update(["is_run" => 0]);
                SingleLoopBuy::where(["setup_id" => $value["setup_id"], "is_deal" => 2, "is_sell" => 0])->update(["is_sell" => 1, "last_qb_token" => 0]);
            }
            //判断当前的数据是否大于交易所的数据
            $setup = SingleLoopSetup::where(["id" => $value["setup_id"]])->find();
            $point_number = getLen($setup["min_token"]);
            if (bccomp($value["last_qb_token"], $value["trade_qb_token"], $point_number) == 1) {
                $sell_token = bcsub($value["last_qb_token"], $value["trade_qb_token"], $point_number);
                echo "剩余的token大于交易的token";
                print_r($value);
                user_log("剩余的token大于交易的token", $value["setup_id"]);
                user_log(json_encode($value), $value["setup_id"]);
                $buy_service = new SingleLoopBuyService();
                //获取买的数据并且修改
                if ($sell_token > 0) {
                    //echo $sell_token . "\r\n";
                    $buy_count = SingleLoopBuy::where(["setup_id" => $value["setup_id"], "is_deal" => 2, "is_sell" => 0])->count();
                    if ($buy_count > 1) {
                        $cut_count = 0;
                    } else {
                        $cut_count = 2;
                    }
                    $buy_list = $buy_service->buy_next_data($value["setup_id"], $sell_token, $point_number, $cut_count);
                    //print_r($buy_list);
                    foreach ($buy_list as $k => $v) {
                        SingleLoopBuy::where(["id" => $v["id"]])->update(["last_qb_token" => $v["do_last_qb_token"], "is_sell" => $v["is_sell"]]);
                        //echo " 第" . $v["rounds"] . "层剩余数量" . $v["do_last_qb_token"];
                        user_log("处理优化数据" . " 第" . $v["rounds"] . "层剩余数量" . $v["do_last_qb_token"], $value["setup_id"]);
                    }
                }
            }
            //查看交易所的数据是否大于剩余
            if (bccomp($value["trade_qb_token"], $value["last_qb_token"], $point_number) == 1) {
                //$sell_token = bcsub($value["last_qb_token"], $value["trade_qb_token"], $point_number);
                echo "交易的token大于剩余的token";
                print_r($value);
                user_log("交易的token大于剩余的token", $value["setup_id"]);
                user_log(json_encode($value), $value["setup_id"]);

                trade_log("检测交易所仓位已当前持有仓位不符，已停止监控", $value);
                user_log("检测交易所仓位已当前持有仓位不符，已停止监控", $value["setup_id"]);
                SingleLoopSetup::where(["symbol" => $value["symbol"], "open_type" => $value["open_type"], "user_id" => $value["user_id"], "platform_id" => $value["platform_id"]])->update(["is_run" => 0]);
            }
        }


        // print_r($new);

        //print_r($arr);
        exit;
        //$list = SingleLoopBuy::where(["user_id" => $sell_info["user_id"], "platform_id" => $sell_info["platform_id"], "is_sell" => 0, "is_deal" => 2])->order("rounds", "asc")->select()->toArray();

        // okex5 {"code":"1","data":[{"clOrdId":"e847386590ce4dBC143e97d612ad8d3e","ordId":"","sCode":"51004","sMsg":"Order amount exceeds current tier limit. Please lower the leverage. ","tag":""}],"msg":"Operation failed."}
    }

    //全部卖出（谨慎操作）
    public function sell_all()
    {
        $setup_list = SingleLoopSetup::select();
        $trade = new Trade();
        foreach ($setup_list as $key => $value) {
            SingleLoopSetup::where(["id" => $value["id"]])->update(["is_run" => 0]);


            $user_id[$value["user_id"] . $value["platform_id"]] = [
                "user_id" => $value["user_id"],
                "platform_id" => $value["platform_id"],
            ];
        }
        if ($user_id) {
            foreach ($user_id as $key => $value) {
                $platform = PlatformMember::where(["user_id" => $value["user_id"]])->find();
                if ($platform) {
                    $trade_order = $trade->order([
                        "user_id" => $value["user_id"],
                        "platform_id" => $value["platform_id"]
                    ]);
                    foreach ($trade_order as $k => $v) {
                        $trade_param = [
                            "user_id" => $value["user_id"],
                            "symbol" => $v["symbol"],
                            "platform_id" => $v["platform_id"],
                            "qb_token" => $v["qb_token"],
                            "open_type" => $v["open_type"],
                        ];
                        $result = $trade->ssell($trade_param);
                        print_r($result);
                    }
                }

            }
        }


    }
}
