<?php
// +----------------------------------------------------------------------
// | RXThinkCMF框架 [ RXThinkCMF ]
// +----------------------------------------------------------------------
// | 版权所有 2017~2020 南京RXThinkCMF研发中心
// +----------------------------------------------------------------------
// | 官方网站: http://www.rxthink.cn
// +----------------------------------------------------------------------
// | Author: 牧羊人 <1175401194@qq.com>
// +----------------------------------------------------------------------

namespace app\common\service;


use app\common\model\Member;
use app\common\model\QuantLog;
use app\common\model\QuantLoopBuy;
use app\common\model\QuantLoopDir;
use app\common\model\QuantLoopItem;
use app\common\model\QuantLoopSell;
use app\common\model\QuantLoopSetup;
use app\common\model\QuantSymbol;
use app\extend\Trade;

/**
 * 操作记录管理-服务类
 * @author 测试
 * @since: 2022/03/10
 * Class QuantLoopItemService
 * @package app\adminapi\service
 */
class QuantLoopItemService extends BaseService
{
    /**
     * 构造函数
     * LevelService constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->model = new QuantLoopItem();
    }

    /**
     * 获取数据列表
     * @return array
     * @since 2022/03/10
     * @author 测试
     */
    public function getList()
    {
        $param = $this->input;

        // 查询条件
        $map = [];


        // 是否卖出
        $is_sale = isset($param['is_sale']) ? (int)$param['is_sale'] : 0;
        if ($is_sale) {
            $map[] = ['is_sale', '=', $is_sale];
        }

        return parent::getList($map); // TODO: Change the autogenerated stub
    }



    /**
     * 第一次运行
     */
    public function first()
    {
        //首先判断是否达成（是否开多还是开空）
        $list = QuantLoopSetup::where(["is_run" => 1])->select();
        $symbol_list = QuantSymbol::where(["is_online" => 1])->select()->toArray();
        $symbol_list_price = [];
        foreach ($symbol_list as $key => $val) {
            $symbol_list_price[$val["title"]] = $val;
        }
        foreach ($list as $key => $value) {
            $dir = QuantLoopDir::where(["status" => 0, "setup_id" => $value["id"], "user_id" => $value["user_id"], "symbol" => $value["symbol"]])->find();
            if ($dir) {
                if ($dir["platform_id"] == 2) {
                    $now_price = $symbol_list_price[$value['symbol']]['ohprice'];
                } else {
                    $now_price = $symbol_list_price[$value['symbol']]['bhprice'];
                }
                //echo $dir["start_price"];
                //判断涨幅
                //$up_back_per = increase($dir["start_price"], $now_price, $value["level"]);
                $up_back_per = getBcRound(($now_price - $dir["start_price"]) / $dir["start_price"] * 100, 3) * $value['lever'];
                if ($up_back_per > 0.4 * $value['lever']) {
                    QuantLoopDir::where(["id" => $dir["id"]])->update(["status" => "1", "open_type" => 2]);
                }
                if ($up_back_per < -0.8 * $value['lever']) {
                    QuantLoopDir::where(["id" => $dir["id"]])->update(["status" => "1", "open_type" => 3]);
                }
            }
        }
    }

    public function dir()
    {
        $dir = QuantLoopDir::where(["status" => 1])->select();
        foreach ($dir as $key => $value) {
            $setup_info = QuantLoopSetup::where(["id" => $value["setup_id"]])->find();

            $row_market = QuantLoopBuy::where(["user_id" => $setup_info["user_id"], "symbol" => $setup_info["symbol"], 'platform_id' => $setup_info['platform_id'], "is_sale" => 0])->where("is_deal", "<", 4)->find();
            if (!$row_market) {
                //判断金额够不够
                if (Member::check_usdt($setup_info["user_id"],1)) {
                    $data = [
                        'user_id' => $setup_info['user_id'],
                        'symbol' => $setup_info['symbol'],
                        'rounds' => 0,
                        'serno' => "U" . $setup_info["user_id"] . "B" . date('mdHis') . str_pad(mt_rand(1, 9999), 5),
                        'qb_source' => $setup_info['qb_first'],
                        'platform_id' => $value['platform_id'],
                        'lever' => $setup_info['lever'], //合约有用
                        'open_type' => $value['open_type'], //开仓方向合约有用
                        'dir_id' => $value["id"]
                    ];
                    QuantLoopBuy::create($data);
                }
            }
        }
    }

    /**
     * 修改量化
     */
    public function setup_save($symbol, $user_id, $platform_id)
    {
        //$symbol_more 需要修改为 买跌
        //$symbol_fall 需要修改为 买涨
        $setup_info = QuantLoopSetup::where(['symbol' => $symbol, 'user_id' => $user_id, "platform_id" => $platform_id])->find();
        //切换open_type
        $member_service = new MemberService();
        $exchange = $member_service->sign($user_id, $platform_id);
        //停止机器人
        if ($platform_id == 2) {
            $symbol = str_replace("/", "-", $symbol) . "-SWAP";
            try {
                $exchange->set_leverage($setup_info["lever"], $symbol, [
                    "mgnMode" => "cross"]);
            } catch (\Exception $e) {
                return [
                    "code" => 1,
                    "msg" => "服务器发生了异常" . $e->getMessage()
                ];
            }
        } else {
            $symbol = str_replace("/", "", $symbol);
            try {
                $exchange->fapiPrivatePostLeverage([
                    "symbol" => $symbol,
                    "leverage" => $setup_info["lever"]
                ]);
            } catch (\Exception $e) {
                return [
                    "code" => 1,
                    "msg" => "服务器发生了异常2"
                ];
            }
        }
        QuantLoopSetup::where(["id" => $setup_info['id']])->update(['rounds' => $setup_info['rounds'] + 1, 'is_run' => 0]);
        return true;
    }

    /**
     * @param $type
     * @throws \ccxt\ArgumentsRequired
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     *
     * 卖出
     */
    public function sell($type, $user_id = 0)
    {
        $trade_extend = new Trade();
        $query = QuantLoopSell::where(["is_deal" => 0]);
        if ($user_id != 0) {
            $query->where(["user_id" => $user_id]);
        }
        $list = $query->select();
        foreach ($list as $key => $value) {
            $user_id = $value["user_id"];
            $serno = $value["serno"];
            $platform_id = $value["platform_id"];
            $symbol = $value["symbol"];
            $qb_source = $value["qb_source"];
            $platform_type = 2;
            $open_type = $value["open_type"];
            $item = QuantLoopItem::where(["serno" => $value["serno"], "symbol" => $symbol])->find();
            $symbol_data = QuantSymbol::where(["title" => $symbol])->find();
            $trade_param = [
                "user_id" => $user_id,
                "symbol" => $symbol,
                "platform_id" => $platform_id,
                "platform_type" => $platform_type,
                "qb_source" => $qb_source,
                'qb_to' => $item["qb_to"],
                'bh_min_price' => $symbol_data["bh_min_price"],
                'ct_val' => $symbol_data["ct_val"],
                "decimal" => $symbol_data["decimal"],
                "side" => "sell",
                "open_type" => $open_type,
            ];
            if ($type == "pro") {
                $result = $trade_extend->trade($trade_param);
            } else {
                $result = $trade_extend->test_trade($trade_param);
            }
            if (isset($result["result"]['id'])) {
                $this->model->startTrans();
                try {
                    $update_sell_data = [
                        "order_id" => $result["result"]["id"],
                        "qb_to" => $result["order_result"]['cost'],
                        "is_deal" => 2,
                    ];
                    $update_sell_data["price"] = $result["order_result"]['price'];
                    if ($platform_id == 2) {
                        $update_sell_data["qb_fee"] = $result["order_result"]['fee']['cost'];
                    }
                    QuantLoopSell::where(["id" => $value[0]["id"]])->update($update_sell_data);
                    //同时修改购买的数据
                    QuantLoopBuy::where(["serno" => $serno, "is_deal" => 3])->update(["is_sale" => 1]);
                    //卖的同时需要修改dir已结束(如果是主单的话去修改状态)
                    if ($value["is_hedge"] == 0) {
                        QuantLoopDir::where(["user_id" => $value["user_id"], "platform_id" => $value["platform_id"], "symbol" => $value["symbol"]])->update(["status" => 3]);
                    }
                    $this->model->commit();
                } catch (\Exception $e) {
                    // 事务回滚
                    $this->model->rollback();
                    //QuantLog::create(['content' => $e->getMessage()]);
                }
                $this->setup_save($symbol, $user_id, $platform_id);
                $this->open($user_id, $platform_id);
            }
        }
    }


    //获取处理交易详情
    public function item()
    {
        $data_market_buy = QuantLoopBuy::where(["is_deal" => 2])->select();
        if ($data_market_buy) {
            foreach ($data_market_buy as $key => $value) {
                if ($value['rounds'] == 0) {
                    $data = [
                        'user_id' => $value['user_id'],
                        'symbol' => $value['symbol'],
                        'serno' => $value['serno'],
                        'qb_source' => $value['qb_source'],
                        'price' => $value['price'],
                        'price_min' => $value['price'],
                        'price_max' => $value['price'],
                        'qb_to' => $value['qb_to'],
                        'is_sale' => 0,
                        'platform_id' => $value['platform_id'],
                        'lever' => $value['lever'], //合约有用
                        'open_type' => $value['open_type'], //开仓方向合约有用
                        'bail' => $value['bail'] + $value['add_bail'],
                        "is_hedge" => $value['is_hedge']
                    ];
                    //计算强平价格和保证金
                    //1) 多仓强平价格=（1.005 – 持仓保证金/开仓价值）*开仓价格
                    //2) 空仓强平价格=（0.995 持仓保证金/开仓价值）*开仓价格
                    //3) 开仓价值=开仓保证金*杠杆倍数
                    //4) 持仓保证金=开仓保证金 追加保证金
                    QuantLoopItem::create($data);
                } else {
                    $rs_market_buy = QuantLoopBuy::where(["user_id" => $value["user_id"], "is_hedge" => $value["is_hedge"], "symbol" => $value["symbol"], "serno" => $value["serno"]])->where("is_deal", "<", 4)->select()->toArray();
                    $qb_source = 0;
                    $qb_to = 0;
                    foreach ($rs_market_buy as $market_buy) {
                        $qb_source += $market_buy['qb_source'];
                        $qb_to += $market_buy['qb_to'];
                    }
                    $price = $qb_source / $qb_to;
                    $data = [
                        'qb_source' => $qb_source,
                        'qb_to' => $qb_to,
                        'price' => $price,
                        'price_min' => $price,
                        'price_max' => $price,
                        'is_sale' => 0,
                        'lever' => $value['lever'], //合约有用
                        'open_type' => $value['open_type'], //开仓方向合约有用
                        'bail' => $value['bail'] + $value['add_bail']
                    ];
                    QuantLoopItem::where(["serno" => $value["serno"]])->update($data);
                }
                QuantLoopBuy::where(["id" => $value["id"]])->update(["is_deal" => 3]);
            }
        }
    }


    /*
       *
       * 买入
       */
    public function buy($type = "pro")
    {
        $trade_extend = new Trade();
        $query = QuantLoopBuy::where(["is_deal" => 0, "is_sale" => 0]);
//        if($user_id!=0){
//            $query->where(["user_id"=>$user_id]);
//        }
        $list = $query->order("serno", "desc")->select();

        foreach ($list as $key => $value) {
            $symbol = QuantSymbol::where(["title" => $value["symbol"]])->find();
            $trade_param = [
                "user_id" => $value["user_id"],
                "symbol" => $value["symbol"],
                "platform_id" => $value["platform_id"],
                "platform_type" => 2,
                "bhprice" => $symbol["bhprice"],
                "bprice" => $symbol["bprice"],
                "ohprice" => $symbol["ohprice"],
                "oprice" => $symbol["oprice"],
                "ct_val" => $symbol["ct_val"],
                "decimal" => $symbol["decimal"],
                'bh_min_price' => $symbol["bh_min_price"],
                "qb_source" => $value['qb_source'],
                "side" => "buy",
                "open_type" => $value["open_type"],
            ];

            if ($type == "pro") {
                $result = $trade_extend->trade($trade_param);
            } else {
                $result = $trade_extend->test_trade($trade_param);
            }

            if (isset($result["result"]["id"])) {
                //更新交易数据
                $update_buy_data = [
                    "qb_source" => $result["order_result"]["cost"],
                    "is_deal" => 2,
                    "order_id" => $result["result"]["id"],
                    "qb_fee" => $result["order_result"]['fee']['cost'],
                ];
                if ($value["platform_id"] == 2) {
                    $update_buy_data["qb_to"] = get_round($result["order_result"]['amount'] * $symbol["ct_val"], $symbol["decimal"]);
                } else {
                    $update_buy_data["qb_to"] = get_round($result["order_result"]['amount'], $symbol["decimal"]);
                }
                //合约计算保证金
                $update_buy_data["bail"] = $update_buy_data["qb_source"] / $value["lever"];
                $update_buy_data["price"] = $result["order_result"]["cost"] / $update_buy_data["qb_to"];
                QuantLoopBuy::where(["id" => $value["id"]])->update($update_buy_data);
                if ($value["is_hedge"] == 0) {
                    QuantLoopDir::where(["user_id" => $value["user_id"], "platform_id" => $value["platform_id"], "symbol" => $value["symbol"]])->update(["status" => 2]);
                }
                $setup_info = QuantLoopSetup::where(["user_id" => $value["user_id"], "symbol" => $symbol["title"], "platform_id" => $value["platform_id"], "is_run" => 1])->find();
                if (!$setup_info) {
                    QuantLoopSetup::where(["user_id" => $value["user_id"], "symbol" => $symbol["title"], "platform_id" => $value["platform_id"], "is_run" => 1])->update(["is_run" => 1]);
                }
            } else {
                QuantLoopBuy::where(["id" => $value["id"]])->update(["is_deal" => 4, "error" => $result["result"]["message"], "param" => json_encode($result["param"])]);
            }
        }
    }


    public function goup($type)
    {
        //查询行情价
        $symbol_list = QuantSymbol::where(["is_online" => 1])->select()->toArray();
        $symbol_list_price = [];
        foreach ($symbol_list as $key => $val) {
            $symbol_list_price[$val["title"]] = $val;
        }
        //首先查询未卖出的
        $list = QuantLoopItem::where(["is_sale" => 0, "is_hedge" => 0])->select()->toArray();
        foreach ($list as $key => $value) {
            if (isset($symbol_list_price[$value["symbol"]])) {
                //获取配置信息
                $data_setup = $this->get_setup($value['user_id'], $value['symbol'], $value['platform_id']);
                $decimal = $symbol_list_price[$value["symbol"]]["decimal"];
                //获取行情价格
                if ($value["platform_id"] == 2) {
                    $now_price = $symbol_list_price[$value["symbol"]]["ohprice"];
                } else {
                    $now_price = $symbol_list_price[$value["symbol"]]["bhprice"];
                }
                if ($value["open_type"] == 3) {
                    $fy = getBcRound(($value['price'] - $now_price) / $now_price * 100, 3) * $value['lever'];
                } else {
                    $fy = getBcRound(($now_price - $value['price']) / $value['price'] * 100, 2) * $value['lever'];
                }

                if ($type == "high") {
                    //需要卖的价格
                    if ($fy >= $data_setup["up_stop_per"]) {
                        $data = [
                            'user_id' => $value['user_id'],
                            'symbol' => $value['symbol'],
                            'serno' => $value['serno'],
                            'item_qb_source' => $value['qb_source'],
                            'qb_source' => get_round($value['qb_to'], $decimal),
                            'is_deal' => 0,
                            'is_bonus' => 0,
                            'platform_id' => $value['platform_id'],
                            'lever' => $value['lever'],
                            'open_type' => $value['open_type'],
                            "is_hedge" => 0
                        ];
                        QuantLoopSell::create($data);
                        QuantLoopItem::where(["id" => $value["id"]])->update(["is_sale" => 3]);
                        //判断是否有对冲的（如果有的话一并卖出）
                        if ($data_setup["is_open_hedge"]) {
                            $hedge_item = QuantLoopItem::where(["is_sale" => 0, "is_hedge" => 1, "symbol" => $value['symbol']])->find();
                            if ($hedge_item) {
                                $data = [
                                    'user_id' => $hedge_item['user_id'],
                                    'symbol' => $hedge_item['symbol'],
                                    'serno' => $hedge_item['serno'],
                                    'item_qb_source' => $value['qb_source'],
                                    'qb_source' => get_round($hedge_item['qb_to'], $decimal),
                                    'is_deal' => 0,
                                    'is_bonus' => 0,
                                    'platform_id' => $hedge_item['platform_id'],
                                    'lever' => $hedge_item['lever'],
                                    'open_type' => $hedge_item['open_type'],
                                    "is_hedge" => 1
                                ];
                                QuantLoopSell::create($data);
                                QuantLoopItem::where(["id" => $hedge_item["id"]])->update(["is_sale" => 3]);
                            }
                        }
                    }
                } else {
                    if ($fy <= $data_setup["one_down_stop_per"]) {
                        $row_loop_buy = QuantLoopBuy::where(["serno" => $value['serno'], "is_hedge" => 0])->where("is_deal", "<", 4)->order("rounds", "desc")->find();
                        if ($row_loop_buy['rounds'] <= $data_setup['by_count']) {
                            //判断下一次是否存在
                            $next_buy = QuantLoopBuy::where(["serno" => $value['serno'], "is_hedge" => 0])->where("rounds", "=", $row_loop_buy["rounds"] + 1)->find();
                            if (!$next_buy) {
                                $data = [
                                    'user_id' => $row_loop_buy['user_id'],
                                    'symbol' => $row_loop_buy['symbol'],
                                    'rounds' => $row_loop_buy['rounds'] + 1,
                                    'serno' => $row_loop_buy['serno'],
                                    'qb_source' => $data_setup["one_qb_first"],
                                    'price' => 0,
                                    'qb_to' => 0,
                                    'is_deal' => 0,
                                    'is_sale' => 0,
                                    'platform_id' => $value['platform_id'],
                                    'lever' => $value['lever'], //合约有用
                                    'open_type' => $value['open_type'], //开仓方向合约有用
                                    "is_hedge" => 0,
                                ];
                                QuantLoopBuy::create($data);
                                QuantLoopItem::where(["id" => $value["id"]])->update(["is_sale" => 3]);
                            }
                        }
                    }
                    if ($fy <= $data_setup["two_down_stop_per"]) {
                        $row_loop_buy = QuantLoopBuy::where(["serno" => $value['serno'], "is_hedge" => 1])->where("is_deal", "<", 4)->order("rounds", "desc")->find();
                        if ($row_loop_buy['rounds'] <= $data_setup['by_count']) {
                            //判断下一次是否存在
                            $next_buy = QuantLoopBuy::where(["serno" => $value['serno'], "is_hedge" => 1])->where("rounds", "=", $row_loop_buy["rounds"] + 1)->find();
                            if (!$next_buy) {
                                $hedge_open_type = $value['open_type'];
                                if ($value['open_type'] == 2) {
                                    $hedge_open_type = 3;
                                }
                                $data = [
                                    'user_id' => $row_loop_buy['user_id'],
                                    'symbol' => $row_loop_buy['symbol'],
                                    'rounds' => $row_loop_buy['rounds'] + 1,
                                    'serno' => $row_loop_buy['serno'],
                                    'qb_source' => $data_setup["two_qb_first"],
                                    'price' => 0,
                                    'qb_to' => 0,
                                    'is_deal' => 0,
                                    'is_sale' => 0,
                                    'platform_id' => $value['platform_id'],
                                    'lever' => $value['lever'], //合约有用
                                    'open_type' => $hedge_open_type, //开仓方向合约有用
                                    "is_hedge" => 1,
                                ];
                                QuantLoopBuy::create($data);
                                QuantLoopItem::where(["id" => $hedge_item["id"]])->update(["is_sale" => 3]);
                            }
                        }
                    }
                }
            }
        }
    }

    public function get_setup($user_id, $symbol, $platform_id)
    {
        //获取量化配置
        $data_setup = QuantLoopSetup::where(["user_id" => $user_id, "symbol" => $symbol, 'platform_id' => $platform_id])->find()->toArray();
        //顺便获取需要当前用户该补第几次仓位
        $loop_buy = QuantLoopBuy::where(["is_deal" => 3, "user_id" => $user_id, "is_sale" => 0, "symbol" => $symbol, 'platform_id' => $platform_id])->order("rounds", "desc")->find();

        $loop_buy["rounds"] = $loop_buy["rounds"] + 1;

        $data_setup["one_qb_first"] = $data_setup["qb_first"];
        $data_setup["two_qb_first"] = $data_setup["qb_first"];

        $data_setup["one_down_stop_per"] = 0;
        $data_setup["two_down_stop_per"] = 0;
        $data_setup["by_count"] = 0;
        $arr = [
            "1" => [
                "one_down_stop_per" => 0.04,
                "two_down_stop_per" => 0.02,
                "one_qb_first" => $data_setup["qb_first"],
                "two_qb_first" => $data_setup["qb_first"],
                "by_count" => 1,

            ], "2" => [
                "one_down_stop_per" => 0.04,
                "two_down_stop_per" => 0.04,
                "one_qb_first" => $data_setup["qb_first"] * 2,
                "two_qb_first" => $data_setup["qb_first"],
                "by_count" => 2,
            ], "3" => [
                "one_down_stop_per" => 0.08,
                "two_down_stop_per" => 0.04,
                "one_qb_first" => $data_setup["qb_first"] * 4,
                "two_qb_first" => $data_setup["qb_first"] * 2,
                "by_count" => 3,
            ], "4" => [
                "one_down_stop_per" => 0.2,
                "two_down_stop_per" => 0.08,
                "one_qb_first" => $data_setup["qb_first"] * 8,
                "two_qb_first" => $data_setup["qb_first"] * 4,
                "by_count" => 4,
            ], "5" => [
                "one_qb_first" => $data_setup["qb_first"] * 16,
                "two_qb_first" => $data_setup["qb_first"] * 8,
                "by_count" => 5,
            ]
        ];
        if ($loop_buy) {
            if (isset($arr[$loop_buy["rounds"]])) {
                $data_setup["one_qb_first"] = $arr[$loop_buy["rounds"]]["one_qb_first"];
                $data_setup["two_qb_first"] = $arr[$loop_buy["rounds"]]["two_qb_first"];

                $data_setup["one_down_stop_per"] = $arr[$loop_buy["rounds"]]["one_down_stop_per"];;
                $data_setup["two_down_stop_per"] = $arr[$loop_buy["rounds"]]["two_down_stop_per"];;
            }
        }
        return $data_setup;
    }


}
