<?php
// +----------------------------------------------------------------------
// | RXThinkCMF框架 [ RXThinkCMF ]
// +----------------------------------------------------------------------
// | 版权所有 2017~2020 南京RXThinkCMF研发中心
// +----------------------------------------------------------------------
// | 官方网站: http://www.rxthink.cn
// +----------------------------------------------------------------------
// | Author: 牧羊人 <1175401194@qq.com>
// +----------------------------------------------------------------------

namespace app\common\service;


use app\common\model\Member;
use app\extend\Trade;
use app\common\model\PlatformMember;
use app\common\model\QuantMarketBuy;
use app\common\model\QuantMarketItem;
use app\common\model\QuantMarketSell;
use app\common\model\QuantSetup;
use app\common\model\QuantSetupDown;
use app\common\model\QuantSetupUp;
use app\common\model\QuantSymbol;
use ccxt\okex5;
use ccxt\binance;
use think\cache\driver\Redis;
use think\Log;

/**
 * 交易详情管理-服务类
 * @author 测试
 * @since: 2022/01/23
 * Class QuantMarketItemService
 * @package app\adminapi\service
 */
class QuantMarketItemService extends BaseService
{
    /**
     * 构造函数
     * LevelService constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->model = new QuantMarketItem();
    }

    /**
     * 获取数据列表
     * @return array
     * @since 2022/01/23
     * @author 测试
     */
    public function getList()
    {
        $param = $this->input;

        // 查询条件
        $map = [];
        if (isset($param['user_name'])) {
//            $ids = Member::where('username','like','%user_name%') ->column('id');
            $ids = Member::where('username', 'like', "%{$param['user_name']}%")->column('id');
//            var_dump($ids);die;
            $map[] = ['user_id', 'IN', $ids];
        }
        return parent::getList($map); // TODO: Change the autogenerated stub
    }

    //第一次运行
    public function first()
    {
        $list = QuantSetup::where(["is_run" => 1])->select();
        foreach ($list as $key => $value) {
            //判断第一次运行是否生成购买内容
            $row_market = QuantMarketBuy::where(["user_id" => $value["user_id"], "symbol" => $value["symbol"], 'platform_id' => $value['platform_id'], 'platform_type' => $value['platform_type'], "is_sale" => 0])->where("is_deal", "<", 4)->find();
            if (!$row_market) {
                //判断金额够不够
                if (Member::check_usdt($value["user_id"], 1)) {
                    $data = [
                        'user_id' => $value['user_id'],
                        'symbol' => $value['symbol'],
                        'rounds' => 0,
                        'serno' => "U" . $value["user_id"] . "B" . date('mdHis') . str_pad(mt_rand(1, 9999), 5),
                        'qb_source' => $value['qb_first'],
                        'platform_id' => $value['platform_id'],
                        'platform_type' => $value['platform_type'],
                        'lever' => $value['lever'], //合约有用
                        'open_type' => $value['open_type'], //开仓方向合约有用
                        'setup_id' => $value['id'], //策略id
                    ];
                    if ($value['is_double'] == 1) {
                        //初次加倍
                        $data['qb_source'] = $value['qb_first'] * 2;
                    }
                    QuantMarketBuy::create($data);
                }
            }
        }
    }

    //获取处理交易详情
    public function item()
    {
        $data_market_buy = QuantMarketBuy::where(["is_deal" => 2])->select();
        if ($data_market_buy) {
            foreach ($data_market_buy as $key => $value) {
                if ($value['rounds'] == 0) {
                    $data = [
                        'user_id' => $value['user_id'],
                        'symbol' => $value['symbol'],
                        'serno' => $value['serno'],
                        'qb_source' => $value['qb_source'],
                        'price' => $value['price'],
                        'price_min' => $value['price'],
                        'price_max' => $value['price'],
                        'qb_to' => $value['qb_to'],
                        'is_sale' => 0,
                        'platform_id' => $value['platform_id'],
                        'platform_type' => $value['platform_type'],
                        'lever' => $value['lever'], //合约有用
                        'open_type' => $value['open_type'], //开仓方向合约有用
                        'bail' => $value['bail'] + $value['add_bail'],
                        'setup_id' => $value['setup_id']//策略id
                    ];
                    //计算强平价格和保证金
                    //1) 多仓强平价格=（1.005 – 持仓保证金/开仓价值）*开仓价格
                    //2) 空仓强平价格=（0.995 持仓保证金/开仓价值）*开仓价格
                    //3) 开仓价值=开仓保证金*杠杆倍数
                    //4) 持仓保证金=开仓保证金 追加保证金
                    if ($value["platform_type"] == 2) {
                        if (in_array($value["open_type"], [1, 2])) {
                            //$data["price_close"] = (1.005 - $data["bail"] / ($data["bail"] * $data["lever"])) * $data["price"];
                        } else {
                            //$data["price_close"] = (0.995 - $data["bail"] / ($data["bail"] * $data["lever"])) * $data["price"];
                        }
                    }
                    QuantMarketItem::create($data);
                } else {
                    $rs_market_buy = QuantMarketBuy::where(["user_id" => $value["user_id"], "symbol" => $value["symbol"], "serno" => $value["serno"]])->where("is_deal", "<", 4)->select()->toArray();
                    $qb_source = 0;
                    $qb_to = 0;
                    foreach ($rs_market_buy as $market_buy) {
                        $qb_source += $market_buy['qb_source'];
                        $qb_to += $market_buy['qb_to'];
                    }
                    $price = $qb_source / $qb_to;
                    $data = [
                        'qb_source' => $qb_source,
                        'qb_to' => $qb_to,
                        'price' => $price,
                        'price_min' => $price,
                        'price_max' => $price,
                        'is_sale' => 0,
                        'lever' => $value['lever'], //合约有用
                        'open_type' => $value['open_type'], //开仓方向合约有用
                        'setup_id' => $value['setup_id'], //策略id
                        'bail' => $value['bail'] + $value['add_bail']
                    ];
                    if ($value["platform_type"] == 2) {
                        if (in_array($value["open_type"], [1, 2])) {
                            $data["price_close"] = (1.005 - $data["bail"] / ($data["bail"] * $data["lever"])) * $data["price"];
                        } else {
                            $data["price_close"] = (0.995 - $data["bail"] / ($data["bail"] * $data["lever"])) * $data["price"];
                        }
                    }
                    QuantMarketItem::where(["serno" => $value["serno"]])->update($data);
                }
                QuantMarketBuy::where(["id" => $value["id"]])->update(["is_deal" => 3]);
            }
        }
    }
    //上涨卖出

    /*
	 * 上涨 卖出
	 * is_sale = 0.未卖出，1.已卖出，2.卖出失败，3.已写入到sell表
	 * price: 100
	 * price_high: 101.3
	 * price_sale: 101
	 * price_max > price_high
	 * price_curr < price_sale
	 */

    /*
 * 下跌 补单
 * price: 100
 * price_low: 96
 * price_buy: 96.5
 * price_min < price_low
 * price_curr > price_buy
 */
    public function goup($type, $output = "")
    {
        //查询行情价
        $symbol_list = QuantSymbol::where(["is_online" => 1])->select()->toArray();
        $symbol_list_price = [];
        foreach ($symbol_list as $key => $val) {
            $symbol_list_price[$val["title"]] = $val;
        }
        //首先查询未卖出的
        $list = QuantMarketItem::where(["is_sale" => 0])->select()->toArray();

        foreach ($list as $key => $value) {
            if (isset($symbol_list_price[$value["symbol"]])) {
                //获取配置信息
                $data_setup = $this->get_setup($value['setup_id']);
                if ($data_setup["is_run"] == 2) continue;
                //需要补仓的倍数
                $value['exp'] = $data_setup['exp'];
                if ($value["platform_type"] == 2) {
//                    $data_setup['up_back_per'] * $data_setup['lever'];
//                    $data_setup['down_back_per'] * $data_setup['lever'];
                }
                //止盈回落百分比
                $value['up_back_per'] = $data_setup['up_back_per'];
                //止损回调百分比
                $value['down_back_per'] = $data_setup['down_back_per'];

                if (in_array($value["open_type"], [3])) {
                    //止损金额
                    $value['price_high'] = $value['price'] + $value['price'] * $data_setup['down_stop_per'];
                    //止赢金额
                    $value['price_low'] = $value['price'] - $value['price'] * $data_setup['up_stop_per'];
                } else {
                    //止赢金额
                    $value['price_high'] = $value['price'] + $value['price'] * $data_setup['up_stop_per'];
                    //止损金额
                    $value['price_low'] = $value['price'] - $value['price'] * $data_setup['down_stop_per'];
                }


//                if ($value["platform_id"] == 2) {
//                    $platform_name = "《欧易》";
//                } else {
//                    $platform_name = "《币安》";
//                }
//                if (in_array($value["open_type"], [1, 2])) {
//                    $open_type = "做多";
//                } else {
//                    $open_type = "做空";
//                }
//                if ($value["platform_type"] == 2) {
//                    $platform_type_name = "《合约》" . $open_type . $value["lever"] . "倍数";
//                } else {
//                    $platform_type_name = "《现货》";
//                }

                //获取行情价格
                if ($value["platform_id"] == 2) {
                    if ($value["platform_type"] == 2) {
                        $now_price = $symbol_list_price[$value["symbol"]]["oprice"];
                    } else {
                        $now_price = $symbol_list_price[$value["symbol"]]["ohprice"];
                    }
                } else {
                    if ($value["platform_type"] == 2) {
                        $now_price = $symbol_list_price[$value["symbol"]]["bprice"];
                    } else {
                        $now_price = $symbol_list_price[$value["symbol"]]["bhprice"];
                    }
                }
                $decimal = $symbol_list_price[$value["symbol"]]["decimal"];
                if ($now_price < $value["price"] && $now_price < $value["price_min"]) {
                    //把购买行情最小值写到库里
                    QuantMarketItem::where(["id" => $value["id"]])->update(["price_min" => $now_price]);
                }
                if ($now_price > $value["price"] && $now_price > $value["price_max"]) {
                    //把购买行情最大值写到库里
                    QuantMarketItem::where(["id" => $value["id"]])->update(["price_max" => $now_price]);
                }


                if ($type == "high") {
                    //需要卖的价格
                    $value['price_sale'] = $value['price_max'] - $value['price_max'] * $value['up_back_per'];

                    if ($value["platform_type"] == 2 && $value["open_type"] == 3) {
                        $value['price_sale'] = $value['price_min'] + $value['price_min'] * $value['up_back_per'];
                    }


//                    if ($value["platform_type"] == 2 && $value["open_type"] == 3) {
//                        $fy = getBcRound(($value['price'] - $now_price) / $now_price * 100, 3) * $value['lever'];
//                    } else {
//                        $fy = getBcRound(($now_price - $value['price']) / $value['price'] * 100, 2);
//                    }

                    if ($value["platform_type"] == 2 && $value["open_type"] == 3) {
                        \think\facade\Log::notice($value["symbol"] . "行情最低价:" . $value['price_min']);
                        \think\facade\Log::notice($value["symbol"] . "止赢最低价:" . $value['price_low']);
                    } else {
                        \think\facade\Log::notice($value["symbol"] . "行情最高价:" . $value['price_max']);
                        \think\facade\Log::notice($value["symbol"] . "止赢最高价:" . $value['price_high']);
                    }

//                    if ($value["platform_type"] == 2 && $value["open_type"] == 3) {
//                        if ($value['price_min'] <= $value['price_low']) {
//                            //有可能回落
//                            if ($now_price >= $value['price_sale']) {
//                                //并且大于开仓金额，然后进行卖掉
//                                if ($now_price < $value['price']) {
//                                    \think\facade\Log::notice($value["symbol"] . ":卖出成功");
//                                } else {
//                                    \think\facade\Log::notice($value["symbol"] . ":当前价《大于》已买进无法卖出,差" . bcsub($value['price'], $now_price, 8));
//                                }
//                            } else {
//                                \think\facade\Log::notice($value["symbol"] . ":当前价《小于》已买进价无法卖出,差" . bcsub($value['price_sale'], $now_price, 8));
//                            }
//                        } else {
//                            \think\facade\Log::notice($value["symbol"] . ":行情最低价《大于》止赢最低价,差" . bcsub($value['price_min'], $value['price_low'], 8));
//                        }
//                    } else {
//                        if ($value['price_max'] >= $value['price_high']) {
//                            if ($now_price <= $value['price_sale']) {
//                                if ($now_price > $value['price']) {
//                                    \think\facade\Log::notice($value["symbol"] . ":卖出成功");
//                                } else {
//                                    \think\facade\Log::notice($value["symbol"] . ":当前价《小于》已买进无法卖出,差" . bcsub($value['price'], $now_price, 8));
//                                }
//                            } else {
//                                \think\facade\Log::notice($value["symbol"] . ":当前价《大于》卖出价还不能够卖出,差" . bcsub($now_price, $value['price_sale'], 8));
//                            }
//                        } else {
//                            \think\facade\Log::notice($value["symbol"] . ":行情最高价《小于》止赢最低价,差" . bcsub($value['price_high'], $value['price_max'], 8));
//                        }
//                    }
                    //判断是否是开空的
                    if ($value["platform_type"] == 2 && $value["open_type"] == 3) {
                        //如果最大值大于止盈金额
                        if ($value['price_min'] <= $value['price_low']) {
                            //有可能回落
                            if ($now_price >= $value['price_sale']) {
                                //并且大于开仓金额，然后进行卖掉
                                if ($now_price < $value['price']) {
                                    //创建卖的事件
                                    $data = [
                                        'user_id' => $value['user_id'],
                                        'symbol' => $value['symbol'],
                                        'serno' => $value['serno'],
                                        'qb_source' => get_round($value['qb_to'], $decimal),
                                        'item_qb_source' => $value['item_qb_source'],
                                        'is_deal' => 0,
                                        'is_bonus' => 0,
                                        'platform_id' => $value['platform_id'],
                                        'platform_type' => $value['platform_type'],
                                        'lever' => $value['lever'],
                                        'open_type' => $value['open_type'],
                                        'setup_id' => $value['setup_id'],//策略id
                                    ];
                                    QuantMarketSell::create($data);
                                    QuantMarketItem::where(["id" => $value["id"]])->update(["is_sale" => 3]);
                                }
                            }
                        }
                    } else {
                        //如果最大值大于止盈金额
                        if ($value['price_max'] >= $value['price_high']) {
                            //有可能回落
                            if ($now_price <= $value['price_sale']) {
                                //并且大于开仓金额，然后进行卖掉
                                if ($now_price > $value['price']) {
                                    //创建卖的事件
                                    $data = [
                                        'user_id' => $value['user_id'],
                                        'symbol' => $value['symbol'],
                                        'serno' => $value['serno'],
                                        'qb_source' => get_round($value['qb_to'], $decimal),
                                        'item_qb_source' => $value['item_qb_source'],
                                        'is_deal' => 0,
                                        'is_bonus' => 0,
                                        'platform_id' => $value['platform_id'],
                                        'platform_type' => $value['platform_type'],
                                        'lever' => $value['lever'],
                                        'open_type' => $value['open_type'],
                                        'setup_id' => $value['setup_id'],//策略id
                                    ];
                                    QuantMarketSell::create($data);
                                    QuantMarketItem::where(["id" => $value["id"]])->update(["is_sale" => 3]);
                                }
                            }
                        }
                    }
                    // \think\facade\Log::notice("----------------------------------------卖出结束--------------------------------------------------------------");
                } else {
                    //获取购买金额
                    $value['price_buy'] = $value['price_min'] + $value['price_min'] * $value['down_back_per'];
                    //判断是否是买空
                    if ($value["platform_type"] == 2 && $value["open_type"] == 3) {
                        $value['price_buy'] = $value['price_max'] - $value['price_max'] * $value['down_back_per'];
                    }

//                    price_low 0.0564672
//                    price_buy 0.058699864
//                    price_min 0.058466
                    //获取到最小值

//                    \think\facade\Log::notice("----------------------------------------买进开始--------------------------------------------------------------");
//                    \think\facade\Log::notice("当前在用户" . $value["user_id"] . "在" . $platform_name . "平台的" . ":" . $value["symbol"] . "类型是" . $platform_type_name);
//                    \think\facade\Log::notice($value["symbol"] . "当前价:" . $now_price);
//                    $fy = getBcRound(($now_price - $value['price']) / $value['price'] * 100, 2);
//                    \think\facade\Log::notice($value["symbol"] . "当前浮盈率是:" . $fy);
//                    \think\facade\Log::notice($value["symbol"] . "购买价:" . $value['price_buy']);
//                    \think\facade\Log::notice($value["symbol"] . "行情最低价:" . $value['price_min']);
//                    \think\facade\Log::notice($value["symbol"] . "止损最低价:" . $value['price_low']);

//                    if ($value["platform_type"] == 2 && $value["open_type"] == 3) {
//                        if ($value['price_max'] >= $value['price_high']) {
//                            if ($now_price <= $value['price_buy']) {
//                                \think\facade\Log::notice($value["symbol"] . ":购买成功");
//                            } else {
//                                \think\facade\Log::notice($value["symbol"] . ":当前价《大于》购买价无法购买,差" . bcsub($value['price_buy'], $now_price, 8));
//                            }
//                        } else {
//                            \think\facade\Log::notice($value["symbol"] . ":行情最高价《小于》止损最高价,差" . bcsub($value['price_max'], $value['price_high'], 8));
//                        }
//                    } else {
//                        if ($value['price_min'] <= $value['price_low']) {
//                            if ($now_price >= $value['price_buy']) {
//                                \think\facade\Log::notice($value["symbol"] . ":购买成功");
//                            } else {
//                                \think\facade\Log::notice($value["symbol"] . ":当前价《小于》购买价无法购买,差" . bcsub($value['price_buy'], $now_price, 8));
//                            }
//                        } else {
//                            \think\facade\Log::notice($value["symbol"] . ":行情最低价《大于》止损最低价,差" . bcsub($value['price_min'], $value['price_low'], 8));
//                        }
//                    }
                    //买空补仓
                    if ($value["platform_type"] == 2 && $value["open_type"] == 3) {
                        if ($value['price_max'] >= $value['price_high']) {
                            //有可能回落
                            if ($now_price <= $value['price_buy']) {
                                $row_market_buy = QuantMarketBuy::where(["serno" => $value['serno']])->where("is_deal", "<", 4)->order("rounds", "desc")->find();
                                if ($row_market_buy['rounds'] <= $data_setup['rounds']) {
                                    //判断下一次是否存在
                                    $next_buy = QuantMarketBuy::where(["serno" => $value['serno']])->where("rounds", "=", $row_market_buy["rounds"] + 1)->find();
                                    if (!$next_buy) {
                                        $data = [
                                            'user_id' => $row_market_buy['user_id'],
                                            'symbol' => $row_market_buy['symbol'],
                                            'rounds' => $row_market_buy['rounds'] + 1,
                                            'serno' => $row_market_buy['serno'],
                                            'qb_source' => $data_setup['qb_first'] * $value['exp'],
                                            'price' => 0,
                                            'qb_to' => 0,
                                            'is_deal' => 0,
                                            'is_sale' => 0,
                                            'platform_id' => $value['platform_id'],
                                            'platform_type' => $value['platform_type'],
                                            'lever' => $value['lever'], //合约有用
                                            'open_type' => $value['open_type'], //开仓方向合约有用
                                            'setup_id' => $value['setup_id'], //策略id
                                        ];
                                        QuantMarketBuy::create($data);
                                        QuantMarketItem::where(["id" => $value["id"]])->update(["is_sale" => 3]);
                                    }
                                }
                            }
                        }
                    } else {
                        if ($value['price_min'] <= $value['price_low']) {
                            if ($now_price >= $value['price_buy']) {
                                $row_market_buy = QuantMarketBuy::where(["serno" => $value['serno']])->where("is_deal", "<", 4)->order("rounds", "desc")->find();
                                if ($row_market_buy['rounds'] <= $data_setup['rounds']) {
                                    if (Member::check_usdt($row_market_buy['user_id'], 1)) {
                                        //判断下一次是否存在
                                        $next_buy = QuantMarketBuy::where(["serno" => $value['serno']])->where("rounds", "=", $row_market_buy["rounds"] + 1)->find();
                                        if (!$next_buy) {
                                            $data = [
                                                'user_id' => $row_market_buy['user_id'],
                                                'symbol' => $row_market_buy['symbol'],
                                                'rounds' => $row_market_buy['rounds'] + 1,
                                                'serno' => $row_market_buy['serno'],
                                                'qb_source' => $data_setup['qb_first'] * $value['exp'],
                                                'price' => 0,
                                                'qb_to' => 0,
                                                'is_deal' => 0,
                                                'is_sale' => 0,
                                                'platform_id' => $value['platform_id'],
                                                'platform_type' => $value['platform_type'],
                                                'lever' => $value['lever'], //合约有用
                                                'open_type' => $value['open_type'], //开仓方向合约有用
                                                'setup_id' => $value['setup_id'], //策略id
                                            ];
                                            QuantMarketBuy::create($data);
                                            QuantMarketItem::where(["id" => $value["id"]])->update(["is_sale" => 3]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    // \think\facade\Log::notice("----------------------------------------买进结束--------------------------------------------------------------");
                }
            }
        }
    }
    //下跌买进
    //卖出
    public function sell($type)
    {
        $list = QuantMarketSell::where(["is_deal" => 0])->select();
        $trade_extend = new Trade();
        foreach ($list as $key => $value) {
            //if($value[""])
            //查询是否配置了user_id
            $symbol_title = $value["symbol"];
//            if ($type == "test") {
//                $order_id = date('Ymd') . str_pad(mt_rand(1, 99999), 5, '0', STR_PAD_LEFT);
//                $result["id"] = $order_id;
//                $order_result["id"] = $order_id;
//                //获取当前市场价
//                $symbol = QuantSymbol::where(["title" => $value["symbol"]])->find();
//                $order_result['amount'] = $value["qb_source"];
//                $order_result['cost'] = $symbol["oprice"] * $value["qb_source"];
//                $order_result['fee']['cost'] = 0;
//            } else {
            $item = QuantMarketItem::where(["serno" => $value["serno"]])->find();
            $symbol = QuantSymbol::where(["title" => $value["symbol"]])->find();
            $trade_param = [
                "user_id" => $value["user_id"],
                "symbol" => $value["symbol"],
                "platform_id" => $value["platform_id"],
                "platform_type" => $value["platform_type"],
                "qb_source" => $value['qb_source'],
                'qb_to' => $item["qb_to"],
                'ct_val' => $symbol["ct_val"],
                'bh_min_price' => $symbol["bh_min_price"],
                "decimal" => $symbol["decimal"],
                "side" => "sell",
                "open_type" => $value["open_type"],
                "setup_id" => $value["setup_id"],//策略id
            ];
            $result = $trade_extend->trade($trade_param);

            //\think\facade\Log::notice("sell ".json_encode($result));
            // try(){}
            if (isset($result["result"]["id"])) {
                //同时修改购买的数据
                QuantMarketBuy::where(["serno" => $value["serno"], "is_deal" => 3])->update(["is_sale" => 1]);
                //同时修改关联的数据
                QuantMarketItem::where(["serno" => $value["serno"]])->update(["is_sale" => 1]);
                //对应的美元
                $update_sell_data["qb_to"] = $result["order_result"]["cost"];
                /*if ($value["platform_id"] == 2 && $value["platform_type"] == 2) {
                    $update_sell_data["price"] = $update_sell_data["qb_to"] / $value['qb_source'];
                } else {
                    $update_sell_data["price"] = $update_sell_data["qb_to"] / $result["order_result"]['amount'];
                }*/
                $update_sell_data["price"] = $result["order_result"]['price'];

                $update_sell_data["order_id"] = $result["result"]["id"];
                $update_sell_data['is_deal'] = 2;

                if ($value["platform_id"] == 2) {
                    $update_sell_data["qb_fee"] = $result["order_result"]['fee']['cost'];
                } else {
                    $update_sell_data["qb_fee"] = 0;
                }
                $update_sell_data["error"] = "";
                $update_sell_data["param"] = json_encode($result["param"]);
                QuantMarketSell::where(["id" => $value["id"]])->update($update_sell_data);
                //卖出后判断是否循环
                $this->check_loop($value["setup_id"]);
            } else {
                //如果连续3次还没有卖掉的话停止
                if ($value['times'] < 3) {
                    QuantMarketSell::where(["id" => $value["id"]])->update([
                        "times" => $value['times'] + 1,
                        "error" => $result["result"]["message"],
                        "param" => json_encode($result["param"])
                    ]);
                } else {
                    QuantMarketItem::where(["serno" => $value["serno"]])->update(["is_sale" => 2]);
                    QuantMarketBuy::where(["serno" => $value["serno"]])->update(["is_sale" => 2]);
                    QuantMarketSell::where(["id" => $value["id"]])->update(["is_deal" => 3]);
                    //关闭机器人
                    QuantSetup::where(["id" => $value["setup_id"]])->update(["is_run" => 3]);
                }
            }
        }
    }

    //购买
    public function buy($type)
    {
        $trade_extend = new Trade();
        //获取需要购买的币种
        $list = QuantMarketBuy::where(["is_deal" => 0, "is_sale" => 0])->select();
        foreach ($list as $key => $value) {
            $symbol = QuantSymbol::where(["title" => $value["symbol"]])->find();
            //处理模拟数据
//            if ($type == "test") {
//                $order_id = date('Ymd') . str_pad(mt_rand(1, 99999), 5, '0', STR_PAD_LEFT);
//                $result["id"] = $order_id;
//                $order_result["id"] = $order_id;
//                //获取当前市场价
//                $order_result['amount'] = $value['qb_source'] / $symbol["oprice"];
//                $order_result['fee']['cost'] = 0;
//            } else {
            //if(cache($value["user_id"]))
            $trade_param = [
                "user_id" => $value["user_id"],
                "symbol" => $value["symbol"],
                "platform_id" => $value["platform_id"],
                "platform_type" => $value["platform_type"],
                "bhprice" => $symbol["bhprice"],
                "bprice" => $symbol["bprice"],
                "ohprice" => $symbol["ohprice"],
                "oprice" => $symbol["oprice"],
                "ct_val" => $symbol["ct_val"],
                'bh_min_price' => $symbol["bh_min_price"],
                "decimal" => $symbol["decimal"],
                "qb_source" => $value['qb_source'],
                "side" => "buy",
                "open_type" => $value["open_type"],
                "setup_id" => $value["setup_id"],//策略id
            ];
            //首先判断这个换成是否存在
            $result = $trade_extend->trade($trade_param);
            //\think\facade\Log::notice("走到这里了1".json_encode($result));
            if (isset($result["result"]["id"])) {
                //更新交易数据
                $update_buy_data = [
                    "qb_source" => $result["order_result"]["cost"],
                    "is_deal" => 2,
                    "order_id" => $result["result"]["id"],
                ];
                if ($value["platform_id"] == 2) {
                    $update_buy_data["qb_fee"] = $result["order_result"]['fee']['cost'];
                } else {
                    $update_buy_data["qb_fee"] = 0;
                }
                if ($value["platform_type"] == 2) {
                    if ($value["platform_id"] == 2) {
                        $update_buy_data["qb_to"] = get_round($result["order_result"]['amount'] * $symbol["ct_val"], 6);
                    } else {
                        $update_buy_data["qb_to"] = get_round($result["order_result"]['amount'], 6);
                    }
                    //合约计算保证金
                    $update_buy_data["bail"] = $update_buy_data["qb_source"] / $value["lever"];

                } else {
                    $update_buy_data["qb_to"] = get_round($result["order_result"]['amount'] - $result["order_result"]['fee']['cost'], 6);
                }
                $update_buy_data["price"] = $result["order_result"]["cost"] / $update_buy_data["qb_to"];
                QuantMarketBuy::where(["id" => $value["id"]])->update($update_buy_data);
                $setup_info = QuantSetup::where(["id" => $value["setup_id"]])->find();
                if (!$setup_info) {
                    QuantSetup::where(["id" => $value["setup_id"]])->update(["is_run" => 1]);
                }
            } else {
                //\think\facade\Log::notice("交易失败了");
                //获取补仓次数
                if ($value["platform_type"] == 2) {
                    $is_run = 0;
                } else {
                    $is_run = $value['rounds'] == 0 ? 0 : 1;
                }
                QuantSetup::where(["id" => $value["setup_id"]])->update(["is_run" => $is_run]);
                //交易失败
                QuantMarketBuy::where(["id" => $value["id"]])->update(["is_deal" => 4, "error" => $result["result"]["message"], "param" => json_encode($result["param"])]);
                //修改交易详情状态
                QuantMarketItem::where(["serno" => $value["serno"]])->update(["is_sale" => 0]);
            }
        }
    }

    public function get_setup($id)
    {
        //获取量化配置
        $data_setup = QuantSetup::where(["id" => $id])->find()->toArray();
        //顺便获取需要当前用户该补第几次仓位
        $market_buy = QuantMarketBuy::where(["setup_id" => $data_setup["id"], "is_sale" => 0])->order("rounds", "desc")->find();
        //$market_buy["rounds"] + 1;
        //echo $market_buy["rounds"];
        $setup_up = QuantSetupUp::where(["setup_id" => $data_setup["id"], "rounds" => $market_buy["rounds"]])->find();
        $setup_down = QuantSetupDown::where(["setup_id" => $data_setup["id"], "rounds" => $market_buy["rounds"]])->find();
        $setup_down_default = QuantSetupDown::where(["user_id" => 0, "symbol" => 'default', "rounds" => $market_buy["rounds"]])->find();
        if ($setup_up) {
            $data_setup['up_stop_per'] = $setup_up['up_stop_per'];
        }
        if ($setup_down_default) {
            $data_setup['exp'] = $setup_down_default['exp'];
        }
        if ($setup_down) {
            $data_setup['down_stop_per'] = $setup_down['down_stop_per'];
            $data_setup['exp'] = $setup_down['exp'];
        }
        return $data_setup;
    }

    //检查是否循环处理
    public function check_loop($id)
    {
        $data_setup = QuantSetup::where(["id" => $id,"is_run" => 1])->find();
        if ($data_setup['is_loop'] == 0) {
            QuantSetup::where(["id" => $data_setup["id"]])->update(["is_run" => 0]);
        } else {
            QuantSetup::where(["id" => $data_setup["id"]])->update(["is_run" => 1]);
        }
    }

}
