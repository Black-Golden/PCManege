<?php
// +----------------------------------------------------------------------
// | RXThinkCMF框架 [ RXThinkCMF ]
// +----------------------------------------------------------------------
// | 版权所有 2017~2020 南京RXThinkCMF研发中心
// +----------------------------------------------------------------------
// | 官方网站: http://www.rxthink.cn
// +----------------------------------------------------------------------
// | Author: 牧羊人 <1175401194@qq.com>
// +----------------------------------------------------------------------

namespace app\common\service;


use app\common\model\Member;
use app\common\model\QuantCash;
use app\common\model\QuantTransfer;
use app\common\model\QuantWallet;
use app\extend\TronTools;

/**
 * 充值管理-服务类
 * @author 测试
 * @since: 2022/01/23
 * Class QuantTransferService
 * @package app\adminapi\service
 */
class QuantTransferService extends BaseService
{
    /**
     * 构造函数
     * LevelService constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->model = new QuantTransfer();
    }

    /**
     * 获取数据列表
     * @return array
     * @since 2022/01/23
     * @author 测试
     */
    public function getList($userId = '')
    {
        $param = $this->input;
        // 查询条件
        $map = [];
        if(isset($param['start_time']) && isset($param['end_time'])){
            $start = strtotime($param['start_time']);
            $end = strtotime($param['end_time']);
            $map[] = ['create_time', 'BETWEEN', [$start,$end]];
        }
        if ($userId) {
            $map[] = ['user_id', '=', $userId];
        }
        if (isset($param['user_name'])) {

            $ids = Member::where('username', 'like', "%{$param['user_name']}%")->column('id');

            $map[] = ['user_id', 'IN', $ids];
        }

        $mun = $this->model->where($map)->sum('value');
        $list = parent::getList($map,[],0,1); // TODO: Change the autogenerated stub
        $list['sum'] =$mun;
        return return_json($list);
    }

    public function init()
    {
        $member = Member::where("id", "<>", 0)->field("id,addr_recharge")->select();
        foreach ($member as $key => $val) {
            $str_request = self::url_request($val["addr_recharge"]);
            $arr_request = json_decode($str_request, true);

            if (isset($arr_request["data"])) {
                if (is_array($arr_request['data'])) {
                    if (count($arr_request['data']) > 0) {
                        $this->token_lisent($arr_request['data'], $val["id"], $val["addr_recharge"]);
                    }
                }
            }

        }
    }

    private function token_lisent($arr_data, $user_id, $owner)
    {
        for ($i = 0; $i < count($arr_data); $i++) {
            if ($arr_data[$i]['ownerAddress'] != $owner && $arr_data[$i]['toAddress'] =="TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t") {
                if ($arr_data[$i]['result'] == 'SUCCESS') {
                    $data_transfer = QuantTransfer::where(["transactionHash" => $arr_data[$i]['hash']])->find();
                    if (empty($data_transfer)) {
                        if (isset($arr_data[$i]['contractData']['data'])) {
                            $this->model->startTrans();
                            try {
                                $data = [
                                    'user_id' => $user_id,
                                    'transactionHash' => $arr_data[$i]['hash'],
                                    'from' => $arr_data[$i]['ownerAddress'],
                                    'to' => $owner,
                                    'value' => self::get_usdt($arr_data[$i]['contractData']['data']),
                                    'create_time' => substr($arr_data[$i]['timestamp'], 0, 10)
                                ];
                                $data['value'] = $data['value'] / pow(10, 6);
                                $qb_usdt = $data['value'];
                                QuantTransfer::insert($data);
                                if ($qb_usdt >= 20) {
                                    $data = [
                                        'user_id' => $user_id,
                                        'qb_usdt' => $qb_usdt,
                                        'usdt_memo' => '从' . $data["from"] . '充值' . $qb_usdt . 'USDT',
                                        'usdt_type_id' => 1,
                                    ];
                                    Member::setUsdt($data);
                                }
                                $this->model->commit();
                            } catch (\ErrorException $e) {
                                $this->model->rollback();
                            }
                        }
                    }
                }
            }
        }
    }

    private function get_usdt($str_usdt)
    {
        $i_zero = 0;
        $ox_usdt = '';
       // $pos =0;
        for ($k = 0; $k < strlen($str_usdt); $k++) {
            $c = $str_usdt[$k];
            if ($c == '0') {
                $i_zero++;
            } else {
                if ($i_zero < 30) {
                    $i_zero = 0;
                } else {
                    $pos = $k;
                    break;
                }
            }
        }
        return hexdec(substr($str_usdt, $pos));
    }

    public function url_request($owner)
    {
        $host = "https://apilist.tronscan.org/";
        $path = "api/transaction";
        $param = "sort=-timestamp&count=true&limit=20&start=0&address={$owner}";
        $method = "GET";
        $url = $host . $path . "?" . $param;

        $curl = curl_init();
        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, $method);
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_FAILONERROR, false);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_HEADER, false);

        if (1 == strpos("$" . $host, "https://")) {
            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);
        }

        return curl_exec($curl);
    }


    //归集
    public function imputation()
    {
        if (get_config("withdraw_privateKey", 1) != "") {
            //imputation_status 0待执行 1执行中 2执行完成 3执行失败 4trx充值占用
            $list = Member::where(["mark" => 1])->where("imputation_status",'<>',3)->where("imputation_status",'<>',1)->select();

            //1. 开始执行
            Member::where(["mark" => 1])->where("imputation_status",'<>',3)->where("imputation_status",'<>',1)->update(["imputation_status" => 1]);

            $tron = new TronTools();
            foreach ($list as $key => $value) {
                if (strlen($value['private_key']) == 64) {
                    \think\facade\Log::notice("value--------------".json_encode($value));
                    //先修改为执行中
                    $res = $tron->get_balance($value['private_key']);
                    \think\facade\Log::notice("res--------------".json_encode($res));
                    usleep(300);
                    if (isset($res['trx']) && isset($res['usdt'])) {
                        $qb_usdt = $res['usdt'] / pow(10, 6);
                        $qb_trx = $res['trx'] / pow(10, 6);
                        if ($qb_usdt > get_config("withdraw_min_usdt", 1)) {
                            //满足提款条件，但是trx不足，先处理
                            if($qb_trx < 10 && $value['imputation_status'] != 4){
                                \think\facade\Log::notice("trx1--------------");
                                $data = $tron->transfer_trx(get_config("withdraw_privateKey", 1), $value['addr_recharge'], get_config("withdraw_min_trx", 1));
                                if ($data["code"] == 1) {
                                    \think\facade\Log::notice("trx2--------------");
                                    //执行失败，跳出.记录失败原因
                                    Member::where(["id" => $value["id"]])->update(["imputation_status" => 3]);
                                }else{
                                    \think\facade\Log::notice("trx3--------------");
                                    //记录状态充trx占用
                                    Member::where(["id" => $value["id"]])->update(["imputation_status" => 4]);
                                }
                                //trx不足的跳出，本次不处理转币，下次任务循环再处理
                                continue;
                            }
                            if ($qb_trx > 10) {
                                \think\facade\Log::notice("tktrx1--------------");
                                $data = $tron->transfer_usdt($value['private_key'], get_config("trx_address", 1), $qb_usdt);
                                if ($data["code"] == 1) {
                                    \think\facade\Log::notice("tktrx2--------------");
                                    //执行失败，跳出.记录失败原因
                                    Member::where(["id" => $value["id"]])->update(["imputation_status" => 3]);
                                }else{
                                    \think\facade\Log::notice("tktrx3--------------");
                                    //执行完成
                                    Member::where(["id" => $value["id"]])->update(["imputation_status" => 2]);
                                }
                            }
                        }else{
                            Member::where(["id" => $value["id"]])->update(["imputation_status" => 0]);
                        }
                    }
                }
            }
        }


    }

    public function withdraw()
    {
        //$list = QuantCash::where(["mark" => 1, "is_check" => 1])->select();
//        foreach ($list as $key => $value) {
//            $this->model->startTrans();
//            try {
//                QuantCash::where('id', $value['id'])->update(['is_check' => 2]);
//                $tron = new TronTools();
//                $res = $tron->transfer_usdt(get_config("withdraw_privateKey", 1), $value['addr_cash'], $value["amount"] - $value["fee"]);
//                if ($res['code'] == 0) {
//                    QuantCash::where('id', $value['id'])->update(['txHash' => $res["txid"], 'chk_time' => time()]);
//                }
//                $this->model->commit();
//
//            } catch (\ErrorException $e) {
//                $this->model->rollback();
//            }
//        }
    }

    public function getUser($userId)
    {
        // 查询条件
        $map = [];
        $map[] = ['user_id', '=', $userId];
        $return = parent::getList($map, ['create_time desc'], 1, 1); // TODO: Change the autogenerated stub

        return $return;
    }

}
