<?php
// +----------------------------------------------------------------------
// | RXThinkCMF框架 [ RXThinkCMF ]
// +----------------------------------------------------------------------
// | 版权所有 2017~2020 南京RXThinkCMF研发中心
// +----------------------------------------------------------------------
// | 官方网站: http://www.rxthink.cn
// +----------------------------------------------------------------------
// | Author: 牧羊人 <1175401194@qq.com>
// +----------------------------------------------------------------------

namespace app\common\service;


use app\common\model\Member;
use app\common\model\QuantLoopBuy;
use app\common\model\QuantLoopDir;
use app\common\model\QuantLoopSell;
use app\common\model\QuantLoopSetup;
use app\common\model\QuantMarketBuy;
use app\common\model\QuantMarketSell;
use app\common\model\QuantSetup;
use app\common\model\QuantStrategy;
use app\common\model\QuantSymbol;

/**
 * 循环量化设置管理-服务类
 * @author 测试
 * @since: 2022/03/10
 * Class QuantLoopSetupService
 * @package app\adminapi\service
 */
class QuantLoopSetupService extends BaseService
{
    /**
     * 构造函数
     * LevelService constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->model = new QuantLoopSetup();
    }

    /**
     * 获取数据列表
     * @return array
     * @since 2022/03/10
     * @author 测试
     */
    public function getList()
    {
        $param = $this->input;

        // 查询条件
        $map = [];


        // 是否运行
        $is_run = isset($param['is_run']) ? (int)$param['is_run'] : 0;
        if ($is_run) {
            $map[] = ['is_run', '=', $is_run];
        }

        // 是否循环
        $is_loop = isset($param['is_loop']) ? (int)$param['is_loop'] : 0;
        if ($is_loop) {
            $map[] = ['is_loop', '=', $is_loop];
        }

        // 策略类型
        $strategy_name = isset($param['strategy_name']) ? (int)$param['strategy_name'] : 0;
        if ($strategy_name) {
            $map[] = ['strategy_name', '=', $strategy_name];
        }

        return parent::getList($map); // TODO: Change the autogenerated stub
    }

    /**
     * @param $userId
     * 获取策略
     */
    public function setup_load($userId)
    {
        $validate = getValidate([
            'platform_id' => 'require',
            'platform_type' => 'require',
            'symbol' => 'require',
        ], [
            'platform_id.require' => '请选择平台',
            'platform_type.require' => '请选择类别',
            'symbol.require' => '请选择交易品种',
        ]);
        if ($validate['code'] == 1) {
            return $validate;
        }

        $data_setup = QuantLoopSetup::where(["symbol" => $this->input["symbol"], "user_id" => $userId, "platform_id" => $this->input["platform_id"], "platform_type" => $this->input["platform_type"]])->find();
        if ($data_setup) {
            //止损百分比
            $data_setup['down_stop_per'] = floatval(getBcRound($data_setup['down_stop_per'] * 100, 1));
            //止盈百分比
            $data_setup['up_stop_per'] = floatval(getBcRound($data_setup['up_stop_per'] * 100, 1));

        } else {
            $data_setup = [
                "symbol" => $this->input["symbol"],
                "strategy_id" => 1,
                "platform_id" => $this->input["platform_id"],
                "platform_type" => $this->input["platform_type"],
                "qb_usdt" => 0,
                "open_type" => 0,
                "qb_first" => 10,
                "lever" => 0,
            ];
            if ($this->input["platform_type"] == 2) {
                $data_setup["lever"] = 5;
                $data_setup["open_type"] = 1;
            }
        }
        return $data_setup;
    }


    /**
     * 保存我的策略
     */
    public function setup_save($userId)
    {

        $validate = getValidate([
            'platform_id' => 'require',
            'symbol' => 'require',
            'strategy_id' => 'require',
            'qb_first' => 'require',
            'is_open_hedge' => 'require',
            'lever' => 'require|min:1|max:124',
        ], [
            'platform_id.require' => '请选择平台',
            'symbol.require' => '请选择交易品种',
            'strategy_id.require' => '请选择策略类型',
            'qb_first.require' => '请输入投币金额',
            'lever.require' => '合约倍数不能为空',
            'is_open_hedge.require' => '请选择是否开启对冲'
        ]);

        if ($validate['code'] == 1) {
            return $validate;
        }
        //止损比例 只有合约有
        $up_back_scale = "";
        //合约账户
        //一会单独处理 TODU
        $validate = getValidate([
            'lever' => 'require|min:1|max:124',
        ], [
            'lever.require' => '合约倍数不能为空',
        ]);
        if ($validate['code'] == 1) {
            return $validate;
        }
        $up_back_scale = 0.5;
        $lever = $this->input["lever"];
        $member_service = new MemberService();
        $exchange = $member_service->sign($userId, $this->input["platform_id"]);
        if (!$exchange) {
            return [
                "code" => 1,
                "msg" => "请先设置API"
            ];
        }

        $strategy = QuantStrategy::where(["id" => $this->input["strategy_id"]])->find();
        if (!$strategy) {
            return [
                "code" => 1,
                "msg" => "策略不存在"
            ];

        }

        $strategy_data_json = json_decode($strategy["data"], true);

        $data_setup = QuantLoopSetup::where(["symbol" => $this->input["symbol"], "user_id" => $userId, "platform_id" => $this->input["platform_id"]])->find();
        if (!$data_setup) {
            $data = [
                'platform_id' => $this->input["platform_id"],
                'symbol' => $this->input["symbol"],
                'strategy_id' => $this->input["strategy_id"],
                'qb_first' => $this->input["qb_first"],
                "user_id" => $userId,
                'up_stop_per' => $strategy['up_stop_per'],
                'is_run' => 0,
                'is_loop' => 0,
                'is_open_hedge' => $this->input["is_open_hedge"],
                'lever' => $lever,
            ];
            $data = QuantLoopSetup::create($data);
        } else {
            $buy_info = QuantLoopBuy::where(["symbol" => $this->input["symbol"], "is_sale" => 0, "is_deal" => 3, "user_id" => $userId, "platform_id" => $this->input["platform_id"]])->find();
            if ($buy_info) {
                return [
                    "code" => 1,
                    "msg" => "请先平仓后再设置"
                ];
            }
            if ($data_setup["is_run"] == 1) {
                return [
                    "code" => 1,
                    "msg" => "请先停止交易再进行设置"
                ];
            }
            $data = [
                'strategy_id' => $this->input["strategy_id"],
                'qb_first' => $this->input["qb_first"],
                'up_stop_per' => $strategy['up_stop_per'],
                'lever' => $lever,
                'is_open_hedge' => $this->input["is_open_hedge"],
//                'up_back_scale' => $up_back_scale
            ];
            QuantLoopSetup::where(["id" => $data_setup["id"]])->update($data);
        }
        return [
            "code" => 0,
            "msg" => "操作成功"
        ];

    }

    //停止机器人
    public function stop($userId)
    {

        $validate = getValidate([
            'platform_id' => 'require',
            'platform_type' => 'require',
            'symbol' => 'require',
        ], [
            'platform_id.require' => '请选择平台',
            'platform_type.require' => '请选择类别',
            'symbol.require' => '请选择交易品种',
        ]);
        if ($validate['code'] == 1) {
            return $validate;
        }

        $data_member = Member::where(["id" => $userId])->find();
        if ($data_member["rank"] == 0) {
            return [
                "code" => 1,
                "msg" => "账号尚未激活"
            ];
        }
        if (!Member::check_usdt($userId, 2)) {
            return [
                "code" => 1,
                "msg" => "账号余额不足"
            ];
        }
        $data_setup = QuantLoopSetup::where(["symbol" => $this->input["symbol"], "user_id" => $userId, "platform_id" => $this->input["platform_id"], "platform_type" => $this->input["platform_type"]])->find();
        if (!$data_setup) {
            return [
                "code" => 1,
                "msg" => "请先设置策略"
            ];
        }

        QuantLoopSetup::where(["id" => $data_setup["id"]])->update(["is_run" => 0]);

        return [
            "code" => 0,
            "msg" => "关闭交易机器人成功"
        ];
    }

    //启动机器人
    public function run($userId)
    {
        $validate = getValidate([
            'platform_id' => 'require',
            'symbol' => 'require',
        ], [
            'platform_id.require' => '请选择平台',
            'symbol.require' => '请选择交易品种',
        ]);
        if ($validate['code'] == 1) {
            return $validate;
        }
        $data_member = Member::where(["id" => $userId])->find();
        if ($data_member["rank"] == 0) {
            return [
                "code" => 1,
                "msg" => "账号尚未激活"
            ];
        }
        if (!Member::check_usdt($userId, 2)) {
            return [
                "code" => 1,
                "msg" => "账号余额不足"
            ];
        }

        $data_setup = QuantLoopSetup::where(["symbol" => $this->input["symbol"], "user_id" => $userId, "platform_id" => $this->input["platform_id"]])->find();
        if (!$data_setup) {
            return [
                "code" => 1,
                "msg" => "请先设置策略"
            ];
        }

        $data = [];
        $symbol = QuantSymbol::where('title', $data_setup['symbol'])->find();
        //欧意
        if ($data_setup["platform_id"] == 2) {
            $data['start_price'] = $symbol['ohprice'];
        } //币安
        else {
            $data['start_price'] = $symbol['bhprice'];
        }
        $data['platform_id'] = $data_setup["platform_id"];
        //策略关联未结束
        $dir = QuantLoopDir::where('setup_id', $data_setup['id'])->find();
        if (!$dir) {
            //查询当前代币价格
            $data['setup_id'] = $data_setup['id'];
            $data['user_id'] = $data_setup['user_id'];
            $data['symbol'] = $data_setup['symbol'];
            QuantLoopDir::create($data);
        } else {
            $dir = QuantLoopDir::where('setup_id', $data_setup['id'])->where('status', 'in', '0,1,3')->find();
            if ($dir) {
                //查询当前代币价格
                $symbol = QuantSymbol::where('title', $data_setup['symbol'])->find();
                $data = [];
                //欧意
                if ($this->input["platform_id"] == 2) {
                    $data['start_price'] = $symbol['ohprice'];
                } //币安
                else {
                    $data['start_price'] = $symbol['bhprice'];
                }
                $data['setup_id'] = $data_setup['id'];
                $data['user_id'] = $data_setup['user_id'];
                $data['symbol'] = $data_setup['symbol'];
                $data['update_time'] = time();
                //尚未设置开仓方向
                $data['status'] = 0;
                QuantLoopDir::where('id', $dir['id'])->update($data);
            } else {
                return [
                    "code" => 1,
                    "msg" => "请先售卖订单"
                ];
            }
        }
        QuantLoopSetup::where(["id" => $data_setup["id"]])->update(["is_run" => 1]);
        return [
            "code" => 0,
            "msg" => "启动交易机器人成功"
        ];
    }

    /**
     * @param $type
     * @throws \ccxt\ArgumentsRequired
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     * 开启机器人
     */
    public function open($userId, $platform_id)
    {
        $data_member = Member::where(["id" => $userId])->find();
        if ($data_member["rank"] == 0) {
            return [
                "code" => 1,
                "msg" => "账号尚未激活"
            ];
        }
        if (!Member::check_usdt($userId, 2)) {
            return [
                "code" => 1,
                "msg" => "账号余额不足"
            ];
        }
        $data_setup = QuantLoopSetup::where(["user_id" => $userId, "platform_id" => $platform_id])->find();
        if (!$data_setup) {
            return [
                "code" => 1,
                "msg" => "请先设置策略"
            ];
        }
        QuantLoopSetup::where(["id" => $data_setup["id"]])->update(["is_run" => 1]);
        return [
            "code" => 0,
            "msg" => "启动交易机器人成功"
        ];
    }


    public function trade_history_log($userId)
    {
        $validate = getValidate([
            'setup_id' => 'require',
        ], [
            'setup_id.require' => '请选择策略',
        ]);
        if ($validate['code'] == 1) {
            return $validate;
        }

        $data_setup = QuantLoopSetup::where(["user_id" => $userId, "id" => $this->input["setup_id"]])->find();

        $buy = QuantLoopBuy::where(["user_id" => $userId])->whereIn("setup_id", [$data_setup["id"]])->order('id', 'desc')->limit(100)->select()->toArray();
        $sell = QuantLoopSell::where(["user_id" => $userId])->whereIn("setup_id", [$data_setup["id"]])->order('id', 'desc')->limit(100)->select()->toArray();
        if (empty($buy) && empty($sell)) {
            return [];
        }
        foreach ($buy as $key => &$value) {
            $value["type"] = "buy";
            $value["type_name"] = "买入";

            $value["is_bonus"] = "";
            $value["is_bonus_name"] = "-";

            $value["qb_float"] = "-";
            $value["per_float"] = "-";

            $value["is_deal_name"] = "未成交";
            if ($value["is_deal"] == 3) {
                $value["is_deal_name"] = "已成交";
            }
            if ($value["is_deal"] == 4) {
                $value["is_deal_name"] = "成交失败";
            }
            $value["is_sale_name"] = "未卖出";
            if ($value["is_sale"] == 1) {
                $value["is_sale_name"] = "已卖出";
            }

            if ($value["is_sale"] == 2) {
                $value["is_sale_name"] = "卖出失败";
            }
        }
        foreach ($sell as $key => &$value) {
            $value["type"] = "sell";
            $value["type_name"] = "卖出";

            $value["is_sale"] = "";
            $value["is_sale_name"] = "-";

            $value["qb_float"] = "-";
            $value["per_float"] = "-";

            $value["is_deal_name"] = "未处理";
            if ($value["is_deal"] == 2) {
                $value["is_deal_name"] = "已成交";
            }
            if ($value["is_deal"] == 3) {
                $value["is_deal_name"] = "成交失败";
            }

            $value["is_bonus_name"] = "未处理";
            if ($value["is_bonus"] == 1) {
                $value["is_bonus_name"] = "已结算";
            }

            if ($value["open_type"] != 3) {
                $value['qb_float'] = bcsub($value["qb_to"], $value['item_qb_source'],2);

                $value['per_float'] = getBcRound($value['qb_float'] * 100 / $value['item_qb_source'], 2);// ;
            } else {
                $value['qb_float'] = bcsub($value['item_qb_source'], $value["qb_to"],2);
                $value['per_float'] = getBcRound($value['qb_float'] * 100 / $value['item_qb_source'], 2);
            }
        }
        $data = array_merge($buy, $sell);
        $add_time = array_column($data, 'create_time');
        array_multisort($add_time, SORT_DESC, $data);
        return $data;
    }
}
