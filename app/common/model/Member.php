<?php
// +----------------------------------------------------------------------
// | RXThinkCMF框架 [ RXThinkCMF ]
// +----------------------------------------------------------------------
// | 版权所有 2017~2020 南京RXThinkCMF研发中心
// +----------------------------------------------------------------------
// | 官方网站: http://www.rxthink.cn
// +----------------------------------------------------------------------
// | Author: 牧羊人 <1175401194@qq.com>
// +----------------------------------------------------------------------

namespace app\common\model;

use app\common\service\MemberService;

/**
 * 会员-模型
 * @author 牧羊人
 * @since 2020/11/15
 * Class Member
 * @package app\common\model
 */
class Member extends BaseModel
{
    // 设置数据表名
    protected $name = "member";
    protected $hidden =[
        "private_key"
    ];

    //判断当前用户金额
    public static function check_usdt($user_id, $type)
    {
        $member = Member::where(["id" => $user_id])->find();
        if ($member) {
            if ($type == 1) {
                //如果金额小于10的话，停用该机器人
                if ($member["qb_usdt"] < get_config('use_min_fee', 1)) {
                    SingleLoopSetup::where(["user_id" => $user_id])->update(["is_run" => 0]);
                    return false;
                }
            } elseif ($type == 2) {
                //如果金额小于10的话，提示用户余额不足
                if ($member["qb_usdt"] < get_config('use_min_fee', 1)) {
                    return false;
                }
            }
        }
        return true;
    }

    //修改余额
    public static function setUsdt($param)
    {
        /*
         $param =[

            "user_id"=>1 //用户id
            "qb_usdt"=>-100, //交易金额
            "usdt_memo"=>"提现多少", //备注
            "usdt_type_id"=>1 //充值U的时候  如果是提现的话必须选上(手续费和提现地址)

            "fee"=>"", //手续费
            "addr_cash"=>"11" //地址
            'commission_id' => 1, //流水id
        ]
         */
        $userInfo = self::where(["id" => $param["user_id"]])->find();
        if (isset($param["qb_usdt"])) {
            if ($param["qb_usdt"] <= 0) {
                if (abs($param["qb_usdt"]) > $userInfo["qb_usdt"]) {
                    $param["qb_usdt"] = -$userInfo["qb_usdt"];
                }
                $usdt_payment_id = 1;
            } else {
                $usdt_payment_id = 2;
            }
            self::where(['id' => $param["user_id"]])->inc('qb_usdt', $param["qb_usdt"])->update();
        }
        $userInfo = self::where(["id" => $param["user_id"]])->find();
        if (isset($param["usdt_type_id"])) {
//            if ($param["usdt_type_id"] == 3) {
//                self::where(['id' => $param["user_id"]])->inc('qb_child_all', $param["qb_usdt"])->update();
//            }
            //查询用户修改后的余额
            $data = [
                'user_id' => $param["user_id"],
                'num' => $param["qb_usdt"],
                'memo' => $param["usdt_memo"],
                'last_num' => $userInfo["qb_usdt"],
                'type_id' => $param["usdt_type_id"],
                'payment_id' => $usdt_payment_id,
            ];
            QuantWallet::create($data);
        }
        //
        if (isset($param['usdt_type_id']) && $param["usdt_type_id"] == 2) {
            $param["qb_usdt"] = abs($param["qb_usdt"]);
            $param["fee"] = abs($param["fee"]);
            QuantCash::create(['user_id' => $param["user_id"], 'amount' => $param["qb_usdt"], 'fee' => $param["fee"], 'addr_cash' => $param["addr_cash"]]);
        }
        return true;

    }


    /**
     * 获取会员信息
     * @param int $id 会员ID
     * @return 数据信息|mixed
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @author 牧羊人
     * @since 2020/11/15
     */
    public function getInfo($id)
    {
        $info = parent::getInfo($id); // TODO: Change the autogenerated stub
        if ($info) {
            // 头像
            if ($info['headimg']) {
                $info['headimg'] = get_image_url($info['headimg']);
            }
            // 城市
            $city = [];
            $city[] = !empty($info['province_code']) ? strval($info['province_code']) : "";
            $city[] = !empty($info['city_code']) ? strval($info['city_code']) : "";
            $city[] = !empty($info['district_code']) ? strval($info['district_code']) : "";
            $info['city'] = $city;

//            $member = new MemberService;

            $info['team_one'] = $this->where('referee_id',$info['id'])->count();


        }
        return $info;
    }


    /**
     * 获取当前代币的总投入总收益
     * @param array $info 策略详情
     * @param int $type 策略类型
     */

    public static function getUsdt($info, $type)
    {
        $price = 0;
        $qb_price = 0;
        $per_float = 0;
        if ($type == 1) { //market
            $list = QuantMarketItem::where('setup_id', $info['id'])->find();
            //当订单存在并且未卖出时
            if ($list && $list['is_deal'] == 0) {
                $symbol = QuantSymbol::where('title', $info['symbol'])->find();
                //ouyi
                if ($info['platform_id'] == 2) {
                    if ($info['platform_type'] == 1) {
                        $now_price = $symbol['oprice'];
                    } else {
                        $now_price = $symbol['ohprice'];
                    }
                } else {
                    if ($info['platform_type'] == 2) {
                        $now_price = $symbol['bprice'];
                    } else {
                        $now_price = $symbol['bhprice'];
                    }
                }

                if ($list["platform_type"] == 1) {
                    $qb_usdt = $list['qb_to'] * $now_price;
                    $qb_float = $qb_usdt - $list['qb_source'];
                    $result['per_float'] = getBcRound($qb_float * 100 / $list['qb_source'], 2);
                    $result['qb_float'] = getBcRound($list['bail'] * $result['per_float'] / 100, 2);
                    $qb_price = $list['qb_source'];
                } else {
                    if ($list["open_type"] != 3) {
                        $qb_float = $now_price - $list['price'];
                        $result['per_float'] = getBcRound($qb_float * 100 / $list['price'] * $list['lever'], 2);// ;
                        $result['qb_float'] = getBcRound($list['bail'] * $result['per_float'] / 100, 2);
                    } else {
                        $qb_float = $list['price'] - $now_price;
                        $result['per_float'] = getBcRound($qb_float * 100 / $now_price * $list['lever'], 2);
                        $result['qb_float'] = getBcRound($list['bail'] * $result['per_float'] / 100, 2);
                    }
                    //合约算法
                    $qb_price = $list['bail'];
                }

                $price = $result['qb_float'];

                //总投入
            }
        } elseif ($type == 2) {//hedge
            $list = QuantHedgeItem::where('setup_id', $info['id'])->order('rounds', 'DESC')->find();
            if ($list) {
                //未卖出
                if ($list['is_sale'] == 0) {
                    $symbol1 = QuantSymbol::where('title', $list['symbol'])->find();
                    if ($list['platform_id'] == 2) {
                        $now_price1 = $symbol1['ohprice'];
                    } else {
                        $now_price1 = $symbol1['bhprice'];
                    }
                    if ($list['open_type'] == 2) {
                        $result_one['qb_float'] = round($now_price1 - $list['price'], 4);
                        $per_float = round($result_one['qb_float'] * 100 / $list['price'] * $list['lever'], 2);// ;
                        $price = round($list['bail'] * $per_float / 100, 2);
                    } else {
                        $result_one['qb_float'] = round($list['price'] - $now_price1, 4);
                        $per_float = round($result_one['qb_float'] * 100 / $now_price1 * $list['lever'], 2);
                        $price = round($list['bail'] * $per_float / 100, 2);
                    }
                } else {
                    $sell_list = QuantHedgeSell::where('setup_id', $info['id'])->order('id', 'DESC')->find();
                    if ($sell_list['price'] && (float)$sell_list['price'] > 0) {
                        if ($list['open_type'] == 2) {
                            $result_two = isset($sell_list['price']) && $sell_list['price'] ? getBcRound($sell_list['price'] - $list['price'], 4) : 0;
                            $per_float = isset($sell_list['price']) && $sell_list['price'] ? getBcRound($result_two * 100 / $list['price'] * $list['lever'], 2) : 0;// ;
                            $price = getBcRound($list['bail'] * $per_float / 100, 2);
                        } else {
                            $result_two = isset($sell_list['price']) && $sell_list['price'] ? getBcRound($list['price'] - $sell_list['price'], 4) : 0;
                            $per_float = isset($sell_list['price']) && $sell_list['price'] ? getBcRound($result_two * 100 / $sell_list['price'] * $list['lever'], 2) : 0;// ;
                            $price = getBcRound($list['bail'] * $per_float / 100, 2);
                        }
                    }
                }
                $qb_price = $list['bail'];
            } else {
                $qb_price = $list['qb_usdt'];
            }
        } elseif ($type == 3) {
        }
        return [
            'price' => sprintf("%.2f", $price),//
            'qb_price' => sprintf("%.2f", $qb_price),//
            'per_float' => sprintf("%.2f", $per_float),//

        ];
    }


}
